{"version":3,"file":"static/js/843.d9422fe5.chunk.js","mappings":"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","sources":["Components/DashBoard/FormManagement/DynamicForm/DynamicFormData.js","Components/DashBoard/FormManagement/DynamicForm/DynamicForm.js"],"sourcesContent":["const dynamicFormData = [\r\n    {\r\n        sectionTitle: 'User Information',\r\n        fields: [\r\n            {\r\n                name: 'fullName',\r\n                label: 'Full Name',\r\n                type: 'text',\r\n                required: true,\r\n                placeholder: 'Enter full name'\r\n            },\r\n            {\r\n                name: 'email',\r\n                label: 'Email Address',\r\n                type: 'email',\r\n                required: true,\r\n                placeholder: 'Enter email'\r\n            },\r\n            {\r\n                name: 'password',\r\n                label: 'Password',\r\n                type: 'password',\r\n                required: true,\r\n                placeholder: 'Enter password'\r\n            },\r\n            {\r\n                name: 'birthday',\r\n                label: 'Date of Birth',\r\n                type: 'date',\r\n                required: false\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        sectionTitle: 'Preferences',\r\n        fields: [\r\n            {\r\n                name: 'colorPreference',\r\n                label: 'Favorite Color',\r\n                type: 'color',\r\n                required: false\r\n            },\r\n            {\r\n                name: 'experienceLevel',\r\n                label: 'Experience Level',\r\n                type: 'range',\r\n                min: 0,\r\n                max: 10,\r\n                step: 1,\r\n                required: false\r\n            },\r\n            {\r\n                name: 'developmentSkills',\r\n                label: 'Development Skills',\r\n                type: 'select',\r\n                options: [\r\n                    { label: 'Frontend', value: 'frontend' },\r\n                    { label: 'Backend', value: 'backend' },\r\n                    { label: 'Full Stack', value: 'fullstack' },\r\n                    { label: 'Data Science', value: 'datascience' }\r\n                ],\r\n                required: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        sectionTitle: 'Feedback',\r\n        fields: [\r\n            {\r\n                name: 'websiteFeedback',\r\n                label: 'Your Feedback',\r\n                type: 'textarea',\r\n                required: false,\r\n                placeholder: 'Share your thoughts'\r\n            },\r\n            {\r\n                name: 'termsAgreement',\r\n                label: 'Agree to Terms',\r\n                type: 'checkbox',\r\n                required: true\r\n            },\r\n            {\r\n                name: 'fileUpload',\r\n                label: 'Upload File',\r\n                type: 'file',\r\n                required: false\r\n            },\r\n            {\r\n                name: 'searchQuery',\r\n                label: 'Search',\r\n                type: 'search',\r\n                required: false,\r\n                placeholder: 'Search...'\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport async function getDynamicFormData() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(dynamicFormData);\r\n        }, 1000);\r\n    })\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './DynamicForm.css';\r\nimport { getDynamicFormData } from './DynamicFormData';\r\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\r\n\r\nconst DynamicForm = () => {\r\n    const [dynamicData, setDynamicData] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        document.title = 'Dynamic Form';\r\n        document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n        getDynamicFormData().then((res) => setDynamicData(res));\r\n    }, []);\r\n\r\n    const methods = useForm();\r\n    const onSubmit = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    const getFiledBasedOnType = (field) => {\r\n        if (\r\n            field.type === 'text' ||\r\n            field.type === 'email' ||\r\n            field.type === 'password' ||\r\n            field.type === 'number' ||\r\n            field.type === 'color' ||\r\n            field.type === 'range' ||\r\n            field.type === 'file' ||\r\n            field.type === 'search'\r\n        ) {\r\n            return <InputField field={field} />;\r\n        } else if (field.type === 'select') {\r\n            return <SelectField field={field} />;\r\n        } else if (field.type === 'textarea') {\r\n            return <TextAreaField field={field} />;\r\n        } else if (field.type === 'checkbox') {\r\n            return <CheckboxField field={field} />;\r\n        } else {\r\n            return <InputField field={field} />;\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"container bg-body rounded shadow-lg mt-4 pt-4 pb-4 dynamic-form-div\">\r\n            <div className=\"container\">\r\n                <FormProvider {...methods}>\r\n                    <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n                        {dynamicData.map((section, index) => {\r\n                            return (\r\n                                <>\r\n                                    <h3>{section.sectionTitle}</h3>\r\n                                    <div className=\"row\" key={index}>\r\n                                        {section.fields.map(\r\n                                            (field, sectionIndex) => {\r\n                                                return (\r\n                                                    <div\r\n                                                        className=\"col-md-6 col-sm-12 mb-3\"\r\n                                                        key={sectionIndex}\r\n                                                    >\r\n                                                        <label>\r\n                                                            {field.label}\r\n                                                        </label>\r\n                                                        {getFiledBasedOnType(\r\n                                                            field\r\n                                                        )}\r\n                                                    </div>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </div>\r\n                                </>\r\n                            );\r\n                        })}\r\n                        <button className=\"btn btn-primary\" type=\"submit\">\r\n                            Submit\r\n                        </button>\r\n                    </form>\r\n                </FormProvider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nfunction InputField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); // retrieve all hook methods\r\n    return (\r\n        <>\r\n            <input\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    }\r\n                })}\r\n                type={field.type}\r\n                placeholder={field.placeholder}\r\n                className=\"form-control\"\r\n            />\r\n            {errors[field.name] && <span>{errors[field.name].message}</span>}\r\n        </>\r\n    );\r\n}\r\nfunction SelectField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); // retrieve all hook methods\r\n    return (\r\n        <>\r\n            <select {...register(field.name)} className=\"form-control\">\r\n                {field.options.map((option, index) => (\r\n                    <option key={index} value={option.value}>\r\n                        {option.label}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {errors[field.name] && <span>{errors[field.name].message}</span>}\r\n        </>\r\n    );\r\n}\r\nfunction TextAreaField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); // retrieve all hook methods\r\n    return (\r\n        <>\r\n            <textarea\r\n                {...register(field.name)}\r\n                placeholder={field.placeholder}\r\n                className=\"form-control\"\r\n            />\r\n            {errors[field.name] && <span>{errors[field.name].message}</span>}\r\n        </>\r\n    );\r\n}\r\nfunction CheckboxField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); // retrieve all hook methods\r\n    return (\r\n        <div className=\"custom-control custom-checkbox\">\r\n            <input\r\n                {...register(field.name)}\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"customCheck1\"\r\n            />\r\n            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                {field.label}\r\n            </label>\r\n            {errors[field.name] && <span>{errors[field.name].message}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DynamicForm;\r\n"],"names":["dynamicFormData","sectionTitle","fields","name","label","type","required","placeholder","min","max","step","options","value","InputField","_ref","field","register","formState","errors","useFormContext","_jsxs","_Fragment","children","_jsx","_objectSpread","message","concat","className","SelectField","_ref2","map","option","index","TextAreaField","_ref3","CheckboxField","_ref4","id","htmlFor","DynamicForm","dynamicData","setDynamicData","React","useEffect","document","title","getElementsByTagName","style","display","async","Promise","resolve","setTimeout","getDynamicFormData","then","res","methods","useForm","getFiledBasedOnType","FormProvider","onSubmit","handleSubmit","data","console","log","section","sectionIndex"],"sourceRoot":""}