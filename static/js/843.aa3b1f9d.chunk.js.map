{"version":3,"file":"static/js/843.aa3b1f9d.chunk.js","mappings":"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","sources":["Components/DashBoard/FormManagement/DynamicForm/DynamicFormData.js","Components/DashBoard/FormManagement/DynamicForm/DynamicForm.js"],"sourcesContent":["const dynamicFormData = [\r\n    {\r\n        sectionTitle: 'User Information',\r\n        fields: [\r\n            {\r\n                name: 'fullName',\r\n                label: 'Full Name',\r\n                type: 'text',\r\n                required: true,\r\n                placeholder: 'Enter full name'\r\n            },\r\n            {\r\n                name: 'email',\r\n                label: 'Email Address',\r\n                type: 'email',\r\n                required: true,\r\n                placeholder: 'Enter email'\r\n            },\r\n            {\r\n                name: 'password',\r\n                label: 'Password',\r\n                type: 'password',\r\n                required: true,\r\n                placeholder: 'Enter password',\r\n                length: 5,\r\n                numberOnly: /^[0-9]+$/\r\n            },\r\n            {\r\n                name: 'birthday',\r\n                label: 'Date of Birth',\r\n                type: 'date',\r\n                required: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        sectionTitle: 'Preferences',\r\n        fields: [\r\n            {\r\n                name: 'colorPreference',\r\n                label: 'Favorite Color',\r\n                type: 'color',\r\n                required: false\r\n            },\r\n            {\r\n                name: 'experienceLevel',\r\n                label: 'Experience Level',\r\n                type: 'range',\r\n                min: 0,\r\n                max: 10,\r\n                step: 1,\r\n                required: false\r\n            },\r\n            {\r\n                name: 'developmentSkills',\r\n                label: 'Development Skills',\r\n                type: 'select',\r\n                options: [\r\n                    { label: 'Select your skills', value: '' },\r\n                    { label: 'Frontend', value: 'frontend' },\r\n                    { label: 'Backend', value: 'backend' },\r\n                    { label: 'Full Stack', value: 'fullstack' },\r\n                    { label: 'Data Science', value: 'datascience' }\r\n                ],\r\n                required: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        sectionTitle: 'Feedback',\r\n        fields: [\r\n            {\r\n                name: 'websiteFeedback',\r\n                label: 'Your Feedback',\r\n                type: 'textarea',\r\n                required: true,\r\n                placeholder: 'Share your thoughts',\r\n                textLength: 10\r\n            },\r\n            {\r\n                name: 'fileUpload',\r\n                label: 'Upload File',\r\n                type: 'file',\r\n                required: false\r\n            },\r\n            {\r\n                name: 'termsAgreement',\r\n                label: 'Agree to Terms',\r\n                type: 'checkbox',\r\n                required: true\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport async function getDynamicFormData() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(dynamicFormData);\r\n        }, 1000);\r\n    });\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './DynamicForm.css';\r\nimport { getDynamicFormData } from './DynamicFormData';\r\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\r\n\r\nconst DynamicForm = () => {\r\n    const [dynamicData, setDynamicData] = React.useState([]);\r\n    const [formState, setFormState] = React.useState({});\r\n\r\n    useEffect(() => {\r\n        document.title = 'Dynamic Form';\r\n        document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n        getDynamicFormData().then((res) => setDynamicData(res));\r\n    }, []);\r\n\r\n    const methods = useForm();\r\n    const onSubmit = async (data) => {\r\n        await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n        setFormState(data);\r\n        console.log(data)\r\n    };\r\n\r\n    const getFiledBasedOnType = (field) => {\r\n        if (\r\n            field.type === 'text' ||\r\n            field.type === 'email' ||\r\n            field.type === 'password' ||\r\n            field.type === 'number' ||\r\n            field.type === 'color' ||\r\n            field.type === 'range' ||\r\n            field.type === 'file' ||\r\n            field.type === 'search'\r\n        ) {\r\n            return <InputField field={field} />;\r\n        } else if (field.type === 'select') {\r\n            return <SelectField field={field} />;\r\n        } else if (field.type === 'textarea') {\r\n            return <TextAreaField field={field} />;\r\n        } else if (field.type === 'checkbox') {\r\n            return <CheckboxField field={field} />;\r\n        } else {\r\n            return <InputField field={field} />;\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div className={`container bg-body rounded shadow-lg mt-4 pt-4 pb-4 ${\r\n                    Object.keys(formState)?.length > 0 &&\r\n                    methods.formState.isValid &&\r\n                    !methods.formState.isSubmitting\r\n                        ? 'dynamic-form-div-with-result'\r\n                        : 'dynamic-form-div'\r\n                }`}>\r\n                <div className=\"container\">\r\n                    <FormProvider {...methods}>\r\n                        <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n                            {dynamicData.map((section, index) => {\r\n                                return (\r\n                                    <>\r\n                                        <h3>{section.sectionTitle}</h3>\r\n                                        <div className=\"row\" key={index}>\r\n                                            {section.fields.map(\r\n                                                (field, sectionIndex) => {\r\n                                                    return (\r\n                                                        <div\r\n                                                            className=\"col-md-6 col-sm-12 mb-3\"\r\n                                                            key={sectionIndex}\r\n                                                        >\r\n                                                            <label>\r\n                                                                {field.label}\r\n                                                            </label>\r\n                                                            {getFiledBasedOnType(\r\n                                                                field\r\n                                                            )}\r\n                                                        </div>\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </div>\r\n                                    </>\r\n                                );\r\n                            })}\r\n                            <button className=\"btn btn-primary sumbit-dynamic-button\" type=\"submit\">\r\n                                {methods.formState.isSubmitting\r\n                                    ? 'Submitting....'\r\n                                    : 'Submit'}\r\n                            </button>\r\n                        </form>\r\n                    </FormProvider>\r\n                </div>\r\n            </div>\r\n            {Object.keys(formState)?.length > 0 &&\r\n                !methods.formState.isSubmitting && (\r\n                    <div className=\"container bg-body rounded shadow-lg mt-4 pt-4 pb-4 dynamic-form-data\">\r\n                        <h1>Dynamic Form Data</h1>\r\n                        <pre>{JSON.stringify(formState, null, 2)}</pre>\r\n                    </div>\r\n                )}\r\n        </>\r\n    );\r\n};\r\nfunction InputField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); \r\n    return (\r\n        <>\r\n            <input\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    },\r\n                    pattern:\r\n                        field.name === 'password'\r\n                            ? {\r\n                                  value: field.numberOnly,\r\n                                  message: `${field.label} is number only`\r\n                              }\r\n                            : null\r\n                })}\r\n                type={field.type}\r\n                placeholder={field.placeholder}\r\n                className=\"form-control\"\r\n            />\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nfunction SelectField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); \r\n    return (\r\n        <>\r\n            <select\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    }\r\n                })}\r\n                className=\"form-control\"\r\n            >\r\n                {field.options.map((option, index) => (\r\n                    <option key={index} value={option.value}>\r\n                        {option.label}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nfunction TextAreaField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); \r\n    return (\r\n        <>\r\n            <textarea\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    },\r\n                    minLength: {\r\n                        value: 10,\r\n                        message: `${field.label} required more than 10 charectors`\r\n                    }\r\n                })}\r\n                placeholder={field.placeholder}\r\n                className=\"form-control\"\r\n            />\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nfunction CheckboxField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext(); \r\n    return (\r\n        <div className=\"custom-control custom-checkbox\">\r\n            <input\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    }\r\n                })}\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"customCheck1\"\r\n            />\r\n            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                {field.label}\r\n            </label>\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DynamicForm;\r\n"],"names":["dynamicFormData","sectionTitle","fields","name","label","type","required","placeholder","length","numberOnly","min","max","step","options","value","textLength","InputField","_ref","field","register","formState","errors","useFormContext","_jsxs","_Fragment","children","_jsx","_objectSpread","message","concat","pattern","className","SelectField","_ref2","map","option","index","TextAreaField","_ref3","minLength","CheckboxField","_ref4","id","htmlFor","DynamicForm","_Object$keys","_Object$keys2","dynamicData","setDynamicData","React","setFormState","useEffect","document","title","getElementsByTagName","style","display","async","Promise","resolve","setTimeout","getDynamicFormData","then","res","methods","useForm","getFiledBasedOnType","Object","keys","isValid","isSubmitting","FormProvider","onSubmit","handleSubmit","r","data","console","log","section","sectionIndex","JSON","stringify"],"sourceRoot":""}