{"version":3,"file":"static/js/115.e6459a31.chunk.js","mappings":"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","sources":["Components/Signup/Signup.js","ValidationSchema/ValidationSchema.js","../node_modules/@hookform/resolvers/zod/src/zod.ts"],"sourcesContent":["import React from 'react';\r\nimport './Signup.css';\r\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { SignUpSchema } from '../../ValidationSchema/ValidationSchema';\r\nimport { useLoadingBar } from 'react-top-loading-bar';\r\n\r\nconst Signup = () => {\r\n    const [formData, setFormData] = React.useState({});\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const { start, complete } = useLoadingBar({\r\n        color: '#1cdbbcd9',\r\n        height: 6\r\n    });\r\n    React.useEffect(() => {\r\n        document.title = 'React Forms Hook Signup';\r\n        if (location.pathname === '/dashboard/5') {\r\n            document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n            document.getElementsByTagName('body')[0].style.paddingTop = '40px';\r\n        } else {\r\n            document.getElementsByTagName('body')[0].style.display = 'flex';\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    const methods = useForm({\r\n        resolver: zodResolver(SignUpSchema)\r\n    });\r\n\r\n    async function onSubmitHandler(data) {\r\n        try {\r\n            start();\r\n            await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n            complete();\r\n            if (location.pathname === '/dashboard/5') {\r\n                setFormData(data);\r\n                return;\r\n            }\r\n            navigate('/');\r\n            localStorage.setItem('loginDetails', JSON.stringify({ data }));\r\n        } catch (e) {\r\n            console.error('Signup onsubmit error', e);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <main className=\"form-signin text-center bg-body rounded shadow-lg\">\r\n                <FormProvider {...methods}>\r\n                    <form onSubmit={methods.handleSubmit(onSubmitHandler)}>\r\n                        <h1 className=\"h3 mb-3 fw-normal\">Sign up</h1>\r\n                        <div className=\"form-floating mb-2\">\r\n                            <InputElement\r\n                                type={'text'}\r\n                                name={'fullName'}\r\n                                placeholder={'Full Name'}\r\n                                headerLabelText={'Full Name'}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-floating mb-2\">\r\n                            <InputElement\r\n                                type={'email'}\r\n                                name={'emailId'}\r\n                                placeholder={'name@example.com'}\r\n                                headerLabelText={'Email address'}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-floating mb-2\">\r\n                            <InputElement\r\n                                type={'text'}\r\n                                name={'phoneNumber'}\r\n                                placeholder={'Phone Number'}\r\n                                headerLabelText={'Phone Number'}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-floating mb-2\">\r\n                            <InputElement\r\n                                type={'password'}\r\n                                name={'password'}\r\n                                placeholder={'Password'}\r\n                                headerLabelText={'Password'}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-floating\">\r\n                            <InputElement\r\n                                type={'password'}\r\n                                name={'confirmPassword'}\r\n                                placeholder={'Confirm Password'}\r\n                                headerLabelText={'Confirm Password'}\r\n                            />\r\n                        </div>\r\n                        <button\r\n                            className={`w-100 btn btn-lg btn-primary sign-up-button mt-2`}\r\n                            type=\"submit\"\r\n                        >\r\n                            {methods.formState.isSubmitting\r\n                                ? 'Loading....'\r\n                                : 'Sign Up'}\r\n                        </button>\r\n                    </form>\r\n                </FormProvider>\r\n            </main>\r\n            {Object.keys(formData)?.length > 0 &&\r\n                !methods.formState.isSubmitting && (\r\n                    <div\r\n                        className=\"form-signin container bg-body rounded shadow-lg mt-4 pt-4 pb-4\"\r\n                        style={{ marginBottom: '5rem' }}\r\n                    >\r\n                        <h1>Form Data</h1>\r\n                        <pre>{JSON.stringify(formData, null, 2)}</pre>\r\n                    </div>\r\n                )}\r\n        </>\r\n    );\r\n};\r\n\r\nfunction InputElement({ type, name, placeholder, headerLabelText }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext();\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                className={`form-control ${errors[name] ? 'is-invalid' : ''}`}\r\n                id={name}\r\n                placeholder={placeholder}\r\n                {...register(name)}\r\n            />\r\n            {errors[name] && (\r\n                <div class=\"invalid-feedback\">{errors[name].message}</div>\r\n            )}\r\n            <label htmlFor=\"floatingInput\">{headerLabelText}</label>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Signup;\r\n","import * as yup from 'yup';\r\nimport { z } from 'zod';\r\n\r\nexport const LoginSchema = yup.object().shape({\r\n    emailId: yup.string().email().required('Email is required'),\r\n    password: yup\r\n        .string()\r\n        .required('Password is required')\r\n        .matches(/^[0-9]+$/, 'Must be only digits')\r\n        .min(5, 'Value should be more than 5 digits')\r\n});\r\n\r\nexport const SignUpSchema = z\r\n    .object({\r\n        fullName: z.string().nonempty('Full Name is required'),\r\n        emailId: z\r\n            .string()\r\n            .email('Invalid Email')\r\n            .nonempty('Email is required')\r\n            .regex(/^[a-z0-9][\\w\\.]+\\@\\w+?(\\.\\w+){1,}$/, 'Invalid Email'),\r\n        phoneNumber: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(10, 'Value should be more than 10 digits')\r\n            .nonempty('Phone Number is required'),\r\n        password: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required'),\r\n        confirmPassword: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required')\r\n    })\r\n    .refine((data) => data.password === data.confirmPassword, {\r\n        message: \"Passwords don't match\",\r\n        path: ['confirmPassword']\r\n    });\r\n\r\nexport const HealthFormSchema = yup.object().shape({\r\n    firstName: yup.string().required('First name is required'),\r\n    lastName: yup.string().required('Last name is required'),\r\n    dob: yup.date().required('Date of Birth is required'),\r\n    email: yup\r\n        .string()\r\n        .email('Invalid email address')\r\n        .required('Email address is required'),\r\n    insurancePlan: yup.string().required('Insurance plan is required'),\r\n    mailingAddress: yup.array().of(\r\n        yup.object().shape({\r\n            streetAddress: yup.string().required('Street Address is required'),\r\n            city: yup.string().required('City is required'),\r\n            region: yup.string().required('Region is required'),\r\n            postalCode: yup.string().required('Postal Code is required').matches(/^[0-9]+$/, 'Must be only digits')\r\n        })\r\n    )\r\n});\r\n\r\nexport const TabFormSchema = z.object({\r\n    // Tab 1 schema\r\n    firstName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid First name')\r\n        .nonempty('First Name is required'),\r\n    lastName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid Last name')\r\n        .nonempty('Last Name is required'),\r\n    // Tab 2 schema\r\n    email: z.string().email('Invalid Email').nonempty('Email is required'),\r\n    phone: z.string().regex(/^\\d{10}$/, 'Phone number must be 10 digits'),\r\n    // Tab 3 schema\r\n    address: z\r\n        .string()\r\n        .min(5, 'Please enter a valid address')\r\n        .nonempty('Address is required'),\r\n    city: z\r\n        .string()\r\n        .min(4, 'Please enter a valid city')\r\n        .nonempty('City is required')\r\n});\r\n","import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport { FieldError, FieldErrors, appendErrors } from 'react-hook-form';\nimport { ZodError, z } from 'zod';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError =>\n  Array.isArray(error?.errors);\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"names":["InputElement","_ref","type","name","placeholder","headerLabelText","register","formState","errors","useFormContext","_jsxs","_Fragment","children","_jsx","_objectSpread","className","concat","id","class","message","htmlFor","Signup","_Object$keys","formData","setFormData","React","navigate","useNavigate","location","useLocation","start","complete","useLoadingBar","color","height","document","title","pathname","getElementsByTagName","style","display","paddingTop","methods","useForm","resolver","zodResolver","SignUpSchema","FormProvider","onSubmit","handleSubmit","async","data","Promise","r","setTimeout","localStorage","setItem","JSON","stringify","e","console","error","isSubmitting","Object","keys","length","marginBottom","LoginSchema","yup","shape","emailId","email","required","password","matches","min","z","object","fullName","string","nonempty","regex","phoneNumber","confirmPassword","refine","path","HealthFormSchema","firstName","lastName","dob","insurancePlan","mailingAddress","of","streetAddress","city","region","postalCode","TabFormSchema","phone","address","n","t","s","code","i","a","join","u","unionErrors","forEach","push","c","types","f","o","shift","resolve","mode","then","shouldUseNativeValidation","values","raw","Array","isArray","criteriaMode","reject"],"sourceRoot":""}