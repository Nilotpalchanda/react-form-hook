{"version":3,"file":"static/js/847.57654dd6.chunk.js","mappings":"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","sources":["../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestErrors.ts","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/generateId.ts","../node_modules/react-hook-form/src/logic/getFocusFieldName.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/append.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/insert.ts","../node_modules/react-hook-form/src/utils/move.ts","../node_modules/react-hook-form/src/utils/prepend.ts","../node_modules/react-hook-form/src/utils/remove.ts","../node_modules/react-hook-form/src/utils/swap.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/update.ts","../node_modules/react-hook-form/src/useFieldArray.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasPromiseValidation.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Ref,\n  ResolverOptions,\n  get,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  Field,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n  ResolverOptions,\n  get,\n  set,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n  const isFileListInstance =\n    typeof FileList !== 'undefined' ? data instanceof FileList : false;\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || isFileListInstance)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(\n  object: T,\n  path?: string | null,\n  defaultValue?: unknown,\n): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldPath, FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (\n  object: FieldValues,\n  path: FieldPath<FieldValues>,\n  value?: unknown,\n) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TransformedValues extends FieldValues | undefined = undefined,\n>(): UseFormReturn<TFieldValues, TContext, TransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          return true;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          return true;\n        } else {\n          if (iterateFieldsByAction(currentField, action)) {\n            break;\n          }\n        }\n      } else if (isObject(currentField)) {\n        if (iterateFieldsByAction(currentField as FieldRefs, action)) {\n          break;\n        }\n      }\n    }\n  }\n  return;\n};\nexport default iterateFieldsByAction;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  InternalNameSet,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  disabledFieldNames: InternalNameSet,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabledFieldNames.has(name)) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n            ? inputValue > maxOutput.value\n            : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n            ? inputValue < minOutput.value\n            : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...data,\n  ...convertToArrayPayload(value),\n];\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...convertToArrayPayload(value),\n  ...convertToArrayPayload(data),\n];\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n      ? [path]\n      : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport getValidationModes from './logic/getValidationModes';\nimport isWatched from './logic/isWatched';\nimport iterateFieldsByAction from './logic/iterateFieldsByAction';\nimport updateFieldArrayRootError from './logic/updateFieldArrayRootError';\nimport validateField from './logic/validateField';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isEmptyObject from './utils/isEmptyObject';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport updateAt from './utils/update';\nimport { VALIDATION_MODE } from './constants';\nimport {\n  Control,\n  Field,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  RegisterOptions,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends\n    FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister,\n    rules,\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  rules &&\n    (control as Control<TFieldValues>).register(\n      name as FieldPath<TFieldValues>,\n      rules as RegisterOptions<TFieldValues>,\n    );\n\n  useSubscribe({\n    next: ({\n      values,\n      name: fieldArrayName,\n    }: {\n      values?: FieldValues;\n      name?: InternalFieldName;\n    }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        const fieldValues = get(values, _name.current);\n        if (Array.isArray(fieldValues)) {\n          setFields(fieldValues);\n          ids.current = fieldValues.map(generateId);\n        }\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    !Array.isArray(get(control._fields, name)) &&\n      set(control._fields, name, undefined);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: FieldArray<TFieldValues, TFieldArrayName>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._state.action = false;\n\n    isWatched(name, control._names) &&\n      control._subjects.state.next({\n        ...control._formState,\n      } as FormState<TFieldValues>);\n\n    if (\n      _actioned.current &&\n      (!getValidationModes(control._options.mode).isOnSubmit ||\n        control._formState.isSubmitted)\n    ) {\n      if (control._options.resolver) {\n        control._executeSchema([name]).then((result) => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (\n            existingError\n              ? (!error && existingError.type) ||\n                (error &&\n                  (existingError.type !== error.type ||\n                    existingError.message !== error.message))\n              : error && error.type\n          ) {\n            error\n              ? set(control._formState.errors, name, error)\n              : unset(control._formState.errors, name);\n            control._subjects.state.next({\n              errors: control._formState.errors as FieldErrors<TFieldValues>,\n            });\n          }\n        });\n      } else {\n        const field: Field = get(control._fields, name);\n        if (\n          field &&\n          field._f &&\n          !(\n            getValidationModes(control._options.reValidateMode).isOnSubmit &&\n            getValidationModes(control._options.mode).isOnSubmit\n          )\n        ) {\n          validateField(\n            field,\n            control._names.disabled,\n            control._formValues,\n            control._options.criteriaMode === VALIDATION_MODE.all,\n            control._options.shouldUseNativeValidation,\n            true,\n          ).then(\n            (error) =>\n              !isEmptyObject(error) &&\n              control._subjects.state.next({\n                errors: updateFieldArrayRootError(\n                  control._formState.errors as FieldErrors<TFieldValues>,\n                  error,\n                  name,\n                ) as FieldErrors<TFieldValues>,\n              }),\n          );\n        }\n      }\n    }\n\n    control._subjects.values.next({\n      name,\n      values: { ...control._formValues },\n    });\n\n    control._names.focus &&\n      iterateFieldsByAction(control._fields, (ref, key: string) => {\n        if (\n          control._names.focus &&\n          key.startsWith(control._names.focus) &&\n          ref.focus\n        ) {\n          ref.focus();\n          return 1;\n        }\n        return;\n      });\n\n    control._names.focus = '';\n\n    control._updateValid();\n\n    _actioned.current = false;\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n      ? value === ''\n        ? NaN\n        : value\n          ? +value\n          : value\n      : valueAsDate && isString(value)\n        ? new Date(value)\n        : setValueAs\n          ? setValueAs(value)\n          : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n      ? rule.source\n      : isObject(rule)\n        ? isRegex(rule.value)\n          ? rule.value.source\n          : rule.value\n        : rule;\n","import { Field, Validate } from '../types';\nimport isFunction from '../utils/isFunction';\nimport isObject from '../utils/isObject';\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\n\nexport default (fieldReference: Field['_f']) =>\n  !!fieldReference &&\n  !!fieldReference.validate &&\n  !!(\n    (isFunction(fieldReference.validate) &&\n      fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n    (isObject(fieldReference.validate) &&\n      Object.values(fieldReference.validate).find(\n        (validateFunction: Validate<unknown, unknown>) =>\n          validateFunction.constructor.name === ASYNC_FUNCTION,\n      ))\n  );\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasPromiseValidation from './hasPromiseValidation';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    disabled: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    values: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValidating || _proxyFormState.validatingFields)\n    ) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method && !_options.disabled) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!_options.disabled) {\n      const disabledField = !!(\n        get(_fields, name) &&\n        get(_fields, name)._f &&\n        get(_fields, name)._f.disabled\n      );\n      if (!isBlurEvent || shouldDirty) {\n        if (_proxyFormState.isDirty) {\n          isPreviousDirty = _formState.isDirty;\n          _formState.isDirty = output.isDirty = _getDirty();\n          shouldUpdateField = isPreviousDirty !== output.isDirty;\n        }\n\n        const isCurrentFieldPristine =\n          disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n\n        isPreviousDirty = !!(\n          !disabledField && get(_formState.dirtyFields, name)\n        );\n        isCurrentFieldPristine || disabledField\n          ? unset(_formState.dirtyFields, name)\n          : set(_formState.dirtyFields, name, true);\n        output.dirtyFields = _formState.dirtyFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.dirtyFields &&\n            isPreviousDirty !== !isCurrentFieldPristine);\n      }\n\n      if (isBlurEvent) {\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n        if (!isPreviousFieldTouched) {\n          set(_formState.touchedFields, name, isBlurEvent);\n          output.touchedFields = _formState.touchedFields;\n          shouldUpdateField =\n            shouldUpdateField ||\n            (_proxyFormState.touchedFields &&\n              isPreviousFieldTouched !== isBlurEvent);\n        }\n      }\n\n      shouldUpdateField && shouldRender && _subjects.state.next(output);\n    }\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (_options.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(_options.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field as Field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const isPromiseFunction =\n            field._f && hasPromiseValidation((field as Field)._f);\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name], true);\n          }\n\n          const fieldError = await validateField(\n            field as Field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name]);\n          }\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        !isEmptyObject(fieldValue) &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) =>\n    !_options.disabled &&\n    (name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n            ? _defaultValues\n            : isString(names)\n              ? { [names]: defaultValue }\n              : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        _options.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.values.next({\n              name,\n              values: { ..._formValues },\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        isObject(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: { ..._formValues },\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.values.next({\n      name: _state.mount ? name : undefined,\n      values: { ..._formValues },\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name = target.name as string;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n    const _updateIsFieldValueUpdated = (fieldValue: any): void => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n        deepEqual(fieldValue, get(_formValues, name, fieldValue));\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.values.next({\n          name,\n          type: event.type,\n          values: { ..._formValues },\n        });\n\n      if (shouldSkipValidation) {\n        if (_proxyFormState.isValid) {\n          if (_options.mode === 'onBlur' && isBlurEvent) {\n            _updateValid();\n          } else if (!isBlurEvent) {\n            _updateValid();\n          }\n        }\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (_proxyFormState.isValid) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n        ? get(values, fieldNames)\n        : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.values.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.values.next({\n      values: { ..._formValues },\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const _updateDisabledField: Control<TFieldValues>['_updateDisabledField'] = ({\n    disabled,\n    name,\n    field,\n    fields,\n  }) => {\n    if (\n      (isBoolean(disabled) && _state.mount) ||\n      !!disabled ||\n      _names.disabled.has(name)\n    ) {\n      disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n\n      updateTouchAndDirty(\n        name,\n        getFieldValue(field ? field._f : get(fields, name)._f),\n        false,\n        false,\n        true,\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined =\n      isBoolean(options.disabled) || isBoolean(_options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _updateDisabledField({\n        field,\n        disabled: isBoolean(options.disabled)\n          ? options.disabled\n          : _options.disabled,\n        name,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined\n        ? { disabled: options.disabled || _options.disabled }\n        : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n\n      let fieldValues = cloneObject(_formValues);\n\n      if (_names.disabled.size) {\n        for (const name of _names.disabled) {\n          set(fieldValues, name, undefined);\n        }\n      }\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TFieldValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as PathValue<\n            TFieldValues,\n            FieldPath<TFieldValues>\n          >,\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        const fieldsToCheck = new Set([\n          ..._names.mount,\n          ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n        ]);\n        for (const fieldName of Array.from(fieldsToCheck)) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = _options.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneObject(values);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.values.next({\n        values: { ...values },\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      disabled: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!_options.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? {}\n        : keepStateOptions.keepDirtyValues\n          ? keepStateOptions.keepDefaultValues && _formValues\n            ? getDirtyFields(_defaultValues, _formValues)\n            : _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n            ? getDirtyFields(_defaultValues, formValues)\n            : keepStateOptions.keepDirty\n              ? _formState.dirtyFields\n              : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? (formValues as Function)(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect &&\n          isFunction(fieldRef.select) &&\n          fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    (_options.defaultValues as Function)().then((values: TFieldValues) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _updateDisabledField,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _updateFormState,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      _setErrors,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >(undefined);\n  const _values = React.useRef<typeof props.values>(undefined);\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n    }\n  }, [props.errors, control]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._updateValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.values.next({\n        values: control._getWatch(),\n      });\n  }, [props.shouldUnregister, control]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["s","e","o","r","t","setCustomValidity","message","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","f","n","a","Object","assign","i","names","keys","some","startsWith","isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","defineProperty","_key","_proxyFormState","isEmptyObject","shouldRenderFormState","formStateData","updateFormState","_objectWithoutProperties","_excluded2","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","_objectSpread","types","generateId","d","performance","now","c","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","concat","focusIndex","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","action","fieldsNames","abortEarly","field","_f","currentField","_excluded4","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","appendAt","fillEmptyArray","insert","moveArrayAt","from","to","splice","prependAt","removeArrayAt","indexes","temp","removeAtIndexes","sort","b","swapArrayAt","indexA","indexB","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","updateAt","fieldValues","useFieldArray","methods","keyName","shouldUnregister","rules","setFields","_getFieldArray","ids","_fieldIds","_name","_actioned","array","register","_ref","fieldArrayName","_subjects","updateValues","updatedFieldArrayValues","_updateFieldArray","_state","state","_formState","_options","isSubmitted","resolver","_executeSchema","then","existingError","_fields","reValidateMode","_formValues","criteriaMode","focus","_updateValid","unregister","swap","argA","argB","move","prepend","prependValue","append","appendValue","remove","insertValue","update","updateValue","item","createSubject","_observers","observers","observer","push","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","_ref2","setValueAs","NaN","getFieldValue","files","selectedOptions","_ref3","getResolverOptions","getRuleValue","rule","source","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","_excluded5","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","_getWatch","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","_excluded6","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","_ref4","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","preventDefault","persist","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","method","args","shouldSetValues","shouldUpdateFieldsAndState","_resetDefaultValues","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","useForm","_formControl","_values"],"sourceRoot":""}