{"version":3,"file":"static/js/858.f2ef1bb7.chunk.js","mappings":"2RAEA,IAAAA,EAAgBC,GACG,aAAjBA,EAAQC,KCHVC,EAAgBC,GAAkCA,aAAiBC,KCAnEC,EAAgBF,GAAuD,MAATA,ECGvD,MAAMG,EAAgBH,GACV,kBAAVA,EAET,IAAAI,EAAkCJ,IAC/BE,EAAkBF,KAClBK,MAAMC,QAAQN,IACfG,EAAaH,KACZD,EAAaC,GCLhBO,EAAgBC,GACdJ,EAASI,IAAWA,EAAgBC,OAChCb,EAAiBY,EAAgBC,QAC9BD,EAAgBC,OAAOC,QACvBF,EAAgBC,OAAOT,MAC1BQ,ECNNG,EAAeA,CAACC,EAA+BC,IAC7CD,EAAME,ICLQD,IACdA,EAAKE,UAAU,EAAGF,EAAKG,OAAO,iBAAmBH,EDIvCI,CAAkBJ,IEH9BK,EAAgBC,IACd,MAAMC,EACJD,EAAWE,aAAeF,EAAWE,YAAYC,UAEnD,OACElB,EAASgB,IAAkBA,EAAcG,eAAe,gBAAgB,ECP5EC,EAAiC,qBAAXC,QACU,qBAAvBA,OAAOC,aACM,qBAAbC,SCEe,SAAAC,EAAeC,GACrC,IAAIC,EACJ,MAAMxB,EAAUD,MAAMC,QAAQuB,GACxBE,EACgB,qBAAbC,UAA2BH,aAAgBG,SAEpD,GAAIH,aAAgB5B,KAClB6B,EAAO,IAAI7B,KAAK4B,QACX,GAAIA,aAAgBI,IACzBH,EAAO,IAAIG,IAAIJ,OACV,IACHL,IAAUK,aAAgBK,MAAQH,KACnCzB,IAAWF,EAASyB,GAcrB,OAAOA,EAVP,GAFAC,EAAOxB,EAAU,GAAK,CAAC,EAElBA,GAAYY,EAAcW,GAG7B,IAAK,MAAMM,KAAON,EACZA,EAAKN,eAAeY,KACtBL,EAAKK,GAAOP,EAAYC,EAAKM,UAJjCL,EAAOD,C,CAYX,OAAOC,CACT,CClCA,IAAAM,EAAwBpC,GACtBK,MAAMC,QAAQN,GAASA,EAAMqC,OAAOC,SAAW,GCDjDC,EAAgBC,QAA2CC,IAARD,ECKnDE,EAAeA,CACbC,EACAC,EACAC,KAEA,IAAKD,IAASxC,EAASuC,GACrB,OAAOE,EAGT,MAAMC,EAASV,EAAQQ,EAAKG,MAAM,cAAcC,QAC9C,CAACF,EAAQX,IACPjC,EAAkB4C,GAAUA,EAASA,EAAOX,IAC9CQ,GAGF,OAAOJ,EAAYO,IAAWA,IAAWH,EACrCJ,EAAYI,EAAOC,IACjBC,EACAF,EAAOC,GACTE,CAAM,ECxBZG,EAAgBjD,GAAsD,mBAAVA,ECA5DkD,EAAgBlD,GAAkB,QAAQmD,KAAKnD,GCE/CoD,EAAgBC,GACdjB,EAAQiB,EAAMC,QAAQ,YAAa,IAAIP,MAAM,UCG/CQ,EAAeA,CACbZ,EACAC,EACA5C,KAEA,IAAIwD,GAAS,EACb,MAAMC,EAAWP,EAAMN,GAAQ,CAACA,GAAQQ,EAAaR,GAC/Cc,EAASD,EAASC,OAClBC,EAAYD,EAAS,EAE3B,OAASF,EAAQE,GAAQ,CACvB,MAAMvB,EAAMsB,EAASD,GACrB,IAAII,EAAW5D,EAEf,GAAIwD,IAAUG,EAAW,CACvB,MAAME,EAAWlB,EAAOR,GACxByB,EACExD,EAASyD,IAAaxD,MAAMC,QAAQuD,GAChCA,EACCC,OAAOL,EAASD,EAAQ,IAEvB,CAAC,EADD,E,CAIV,GAAY,cAARrB,GAA+B,gBAARA,GAAiC,cAARA,EAClD,OAGFQ,EAAOR,GAAOyB,EACdjB,EAASA,EAAOR,E,CAElB,OAAOQ,CAAM,ECrCR,MAAMoB,EAAS,CACpBC,KAAM,OACNC,UAAW,WACXC,OAAQ,UAGGC,EAAkB,CAC7BC,OAAQ,SACRC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,IAAK,OAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCjBNC,EAAkBC,EAAAA,cAA0C,MAgCrDC,EAAiBA,IAK5BD,EAAAA,WAAiBD,GAoCNG,EAKXC,IAEA,MAAM,SAAEC,GAAsBD,EAATjD,GAAImD,EAAAA,EAAAA,GAAKF,EAAKG,GACnC,OACEN,EAAAA,cAACD,EAAgBQ,SAAQ,CAAClF,MAAO6B,GAC9BkD,EACwB,ECrF/B,IAAAI,EAAe,SACbC,EACAC,EACAC,GAEE,IADFC,IAAMC,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,KAAAA,UAAA,GAEN,MAAM1C,EAAS,CACb2C,cAAeJ,EAAQK,gBAGzB,IAAK,MAAMvD,KAAOiD,EAChBO,OAAOC,eAAe9C,EAAQX,EAAK,CACjCO,IAAKA,KACH,MAAMmD,EAAO1D,EAOb,OALIkD,EAAQS,gBAAgBD,KAAU1B,EAAgBK,MACpDa,EAAQS,gBAAgBD,IAASN,GAAUpB,EAAgBK,KAG7Dc,IAAwBA,EAAoBO,IAAQ,GAC7CT,EAAUS,EAAK,IAK5B,OAAO/C,CACT,ECzBAiD,EAAgB/F,GACdI,EAASJ,KAAW2F,OAAOK,KAAKhG,GAAO0D,OCKzCuC,EAAeA,CACbC,EACAJ,EACAK,EACAZ,KAEAY,EAAgBD,GAChB,MAAM,KAAErF,GAAuBqF,EAAdd,GAASJ,EAAAA,EAAAA,GAAKkB,EAAaE,GAE5C,OACEL,EAAcX,IACdO,OAAOK,KAAKZ,GAAW1B,QAAUiC,OAAOK,KAAKF,GAAiBpC,QAC9DiC,OAAOK,KAAKZ,GAAWiB,MACpBlE,GACC2D,EAAgB3D,OACdoD,GAAUpB,EAAgBK,MAC/B,EC1BL8B,EAAmBtG,GAAcK,MAAMC,QAAQN,GAASA,EAAQ,CAACA,GCU3D,SAAUuG,EAAgBzB,GAC9B,MAAM0B,EAAS7B,EAAAA,OAAaG,GAC5B0B,EAAOC,QAAU3B,EAEjBH,EAAAA,WAAgB,KACd,MAAM+B,GACH5B,EAAM6B,UACPH,EAAOC,QAAQG,SACfJ,EAAOC,QAAQG,QAAQC,UAAU,CAC/BC,KAAMN,EAAOC,QAAQK,OAGzB,MAAO,KACLJ,GAAgBA,EAAaK,aAAa,CAC3C,GACA,CAACjC,EAAM6B,UACZ,CC1BA,IAAAK,EAAgBhH,GAAqD,kBAAVA,ECI3DiH,EAAeA,CACbrG,EACAsG,EACAC,EACAC,EACAvE,IAEImE,EAASpG,IACXwG,GAAYF,EAAOG,MAAMC,IAAI1G,GACtB8B,EAAIyE,EAAYvG,EAAOiC,IAG5BxC,MAAMC,QAAQM,GACTA,EAAM2G,KACVC,IACCJ,GAAYF,EAAOG,MAAMC,IAAIE,GAAY9E,EAAIyE,EAAYK,OAK/DJ,IAAaF,EAAOO,UAAW,GAExBN,GCpBT,IAAAO,EAAeA,CACb7G,EACA8G,EACAC,EACA9H,EACA+H,IAEAF,GAAwBG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEfF,EAAO/G,IAAK,IACfkH,OAAKD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACCF,EAAO/G,IAAS+G,EAAO/G,GAAOkH,MAAQH,EAAO/G,GAAOkH,MAAQ,CAAC,GAAC,IAClE,CAACjI,GAAO+H,IAAW,MAGvB,CAAC,ECrBPG,EAAeA,KACb,MAAMC,EACmB,qBAAhBC,YAA8BjI,KAAKkI,MAA4B,IAApBD,YAAYC,MAEhE,MAAO,uCAAuC7E,QAAQ,SAAU8E,IAC9D,MAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKG,SAAS,GAAG,GACpD,ECLJC,EAAe,SACb5H,EACA2C,GAAa,IACbkF,EAAAlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAiC,CAAC,EAAC,OAEnCkD,EAAQC,aAAepG,EAAYmG,EAAQC,aACvCD,EAAQE,WAAS,GAAAC,OACdhI,EAAI,KAAAgI,OAAItG,EAAYmG,EAAQI,YAActF,EAAQkF,EAAQI,WAAU,KACvE,EAAE,ECRRC,EAAgBC,IAAW,CACzBC,YAAaD,GAAQA,IAAS7E,EAAgBG,SAC9C4E,SAAUF,IAAS7E,EAAgBC,OACnC+E,WAAYH,IAAS7E,EAAgBE,SACrC+E,QAASJ,IAAS7E,EAAgBK,IAClC6E,UAAWL,IAAS7E,EAAgBI,YCNtC+E,EAAeA,CACbzI,EACAqG,EACAqC,KAECA,IACArC,EAAOO,UACNP,EAAOG,MAAMvG,IAAID,IACjB,IAAIqG,EAAOG,OAAOmC,MACfC,GACC5I,EAAK6I,WAAWD,IAChB,SAAStG,KAAKtC,EAAK8I,MAAMF,EAAU/F,YCT3C,MAAMkG,EAAwBA,CAC5BC,EACAC,EACAC,EACAC,KAEA,IAAK,MAAM7H,KAAO4H,GAAepE,OAAOK,KAAK6D,GAAS,CACpD,MAAMI,EAAQvH,EAAImH,EAAQ1H,GAE1B,GAAI8H,EAAO,CACT,MAAM,GAAEC,GAAwBD,EAAjBE,GAAYnF,EAAAA,EAAAA,GAAKiF,EAAKG,GAErC,GAAIF,EAAI,CACN,GAAIA,EAAGG,MAAQH,EAAGG,KAAK,IAAMP,EAAOI,EAAGG,KAAK,GAAIlI,KAAS6H,EACvD,OAAO,EACF,GAAIE,EAAGI,KAAOR,EAAOI,EAAGI,IAAKJ,EAAGrJ,QAAUmJ,EAC/C,OAAO,EAEP,GAAIJ,EAAsBO,EAAcL,GACtC,K,MAGC,GAAI1J,EAAS+J,IACdP,EAAsBO,EAA2BL,GACnD,K,EAKF,ECvBR,IAAAS,EAAeA,CACb3C,EACA4C,EACA3J,KAEA,MAAM4J,EAAmBnE,EAAsB5D,EAAIkF,EAAQ/G,IAG3D,OAFA0C,EAAIkH,EAAkB,OAAQD,EAAM3J,IACpC0C,EAAIqE,EAAQ/G,EAAM4J,GACX7C,CAAM,EChBf8C,GAAgB7K,GACG,SAAjBA,EAAQC,KCHV6K,GAAgB3K,GACG,oBAAVA,ECCT4K,GAAgB5K,IACd,IAAKwB,EACH,OAAO,EAGT,MAAMqJ,EAAQ7K,EAAUA,EAAsB8K,cAA6B,EAC3E,OACE9K,aACC6K,GAASA,EAAME,YAAcF,EAAME,YAAYrJ,YAAcA,YAAY,ECP9EsJ,GAAgBhL,GAAqCgH,EAAShH,GCD9DiL,GAAgBpL,GACG,UAAjBA,EAAQC,KCHVoL,GAAgBlL,GAAoCA,aAAiBmL,OCOrE,MAAMC,GAAqC,CACzCpL,OAAO,EACPqL,SAAS,GAGLC,GAAc,CAAEtL,OAAO,EAAMqL,SAAS,GAE5C,IAAAE,GAAgB7C,IACd,GAAIrI,MAAMC,QAAQoI,GAAU,CAC1B,GAAIA,EAAQhF,OAAS,EAAG,CACtB,MAAM8H,EAAS9C,EACZrG,QAAQoJ,GAAWA,GAAUA,EAAO/K,UAAY+K,EAAO9E,WACvDY,KAAKkE,GAAWA,EAAOzL,QAC1B,MAAO,CAAEA,MAAOwL,EAAQH,UAAWG,EAAO9H,O,CAG5C,OAAOgF,EAAQ,GAAGhI,UAAYgI,EAAQ,GAAG/B,SAErC+B,EAAQ,GAAGgD,aAAenJ,EAAYmG,EAAQ,GAAGgD,WAAW1L,OAC1DuC,EAAYmG,EAAQ,GAAG1I,QAA+B,KAArB0I,EAAQ,GAAG1I,MAC1CsL,GACA,CAAEtL,MAAO0I,EAAQ,GAAG1I,MAAOqL,SAAS,GACtCC,GACFF,E,CAGN,OAAOA,EAAa,EC5BtB,MAAMO,GAAkC,CACtCN,SAAS,EACTrL,MAAO,MAGT,IAAA4L,GAAgBlD,GACdrI,MAAMC,QAAQoI,GACVA,EAAQ1F,QACN,CAAC6I,EAAUJ,IACTA,GAAUA,EAAO/K,UAAY+K,EAAO9E,SAChC,CACE0E,SAAS,EACTrL,MAAOyL,EAAOzL,OAEhB6L,GACNF,IAEFA,GClBQ,SAAUG,GACtBhJ,EACAwH,GACiB,IAAjBxK,EAAI0F,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,WAEP,GACEwF,GAAUlI,IACTzC,MAAMC,QAAQwC,IAAWA,EAAOiJ,MAAMf,KACtC/H,EAAUH,KAAYA,EAEvB,MAAO,CACLhD,OACA+H,QAASmD,GAAUlI,GAAUA,EAAS,GACtCwH,MAGN,CChBA,IAAA0B,GAAgBC,GACd7L,EAAS6L,KAAoBf,GAAQe,GACjCA,EACA,CACEjM,MAAOiM,EACPpE,QAAS,ICwBjBqE,GAAeC,MACblC,EACAmC,EACAjF,EACAQ,EACA0E,EACAC,KAEA,MAAM,IACJhC,EAAG,KACHD,EAAI,SACJkC,EAAQ,UACRC,EAAS,UACTC,EAAS,IACTC,EAAG,IACHC,EAAG,QACHC,EAAO,SACPC,EAAQ,KACRhM,EAAI,cACJiM,EAAa,MACbC,GACE9C,EAAMC,GACJ8C,EAA+BtK,EAAIyE,EAAYtG,GACrD,IAAKkM,GAASX,EAAmBtL,IAAID,GACnC,MAAO,CAAC,EAEV,MAAMoM,EAA6B5C,EAAOA,EAAK,GAAMC,EAC/C4C,EAAqBrF,IACrBwE,GAA6BY,EAASE,iBACxCF,EAASC,kBAAkBjK,EAAU4E,GAAW,GAAKA,GAAW,IAChEoF,EAASE,iB,EAGP3C,EAA6B,CAAC,EAC9B4C,EAAUnC,GAAaX,GACvB+C,EAAazN,EAAgB0K,GAC7BgD,EAAoBF,GAAWC,EAC/BE,GACFT,GAAiBpC,GAAYJ,KAC7B/H,EAAY+H,EAAItK,QAChBuC,EAAYyK,IACbpC,GAAcN,IAAsB,KAAdA,EAAItK,OACZ,KAAfgN,GACC3M,MAAMC,QAAQ0M,KAAgBA,EAAWtJ,OACtC8J,EAAoB9F,EAAa+F,KACrC,KACA5M,EACA8G,EACA6C,GAEIkD,EAAmB,SACvBC,EACAC,EACAC,GAGE,IAFFC,EAAAtI,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAmBf,EACnBsJ,EAAAvI,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAmBf,EAEnB,MAAMoD,EAAU8F,EAAYC,EAAmBC,EAC/CrD,EAAM3J,IAAKiH,EAAAA,EAAAA,GAAA,CACThI,KAAM6N,EAAYG,EAAUC,EAC5BlG,UACAyC,OACGkD,EAAkBG,EAAYG,EAAUC,EAASlG,GAExD,EAEA,GACEyE,GACKjM,MAAMC,QAAQ0M,KAAgBA,EAAWtJ,OAC1C6I,KACGe,IAAsBC,GAAWrN,EAAkB8M,KACnD/J,EAAU+J,KAAgBA,GAC1BK,IAAe9B,GAAiBlB,GAAMgB,SACtC+B,IAAYxB,GAAcvB,GAAMgB,SACvC,CACA,MAAM,MAAErL,EAAK,QAAE6H,GAAYmD,GAAUuB,GACjC,CAAEvM,QAASuM,EAAU1E,QAAS0E,GAC9BP,GAAmBO,GAEvB,GAAIvM,IACFwK,EAAM3J,IAAKiH,EAAAA,EAAAA,GAAA,CACThI,KAAM2E,EACNoD,UACAyC,IAAK2C,GACFO,EAAkB/I,EAAiCoD,KAEnDF,GAEH,OADAuF,EAAkBrF,GACX2C,C,CAKb,IAAK+C,KAAarN,EAAkBwM,KAASxM,EAAkByM,IAAO,CACpE,IAAIgB,EACAK,EACJ,MAAMC,EAAYjC,GAAmBW,GAC/BuB,EAAYlC,GAAmBU,GAErC,GAAKxM,EAAkB8M,IAAgBlJ,MAAMkJ,GAUtC,CACL,MAAMmB,EACH7D,EAAyB8D,aAAe,IAAInO,KAAK+M,GAC9CqB,EAAqBC,GACzB,IAAIrO,MAAK,IAAIA,MAAOsO,eAAiB,IAAMD,GACvCE,EAAqB,QAAZlE,EAAIxK,KACb2O,EAAqB,QAAZnE,EAAIxK,KAEfkH,EAASiH,EAAUjO,QAAUgN,IAC/BW,EAAYa,EACRH,EAAkBrB,GAAcqB,EAAkBJ,EAAUjO,OAC5DyO,EACEzB,EAAaiB,EAAUjO,MACvBmO,EAAY,IAAIlO,KAAKgO,EAAUjO,QAGnCgH,EAASkH,EAAUlO,QAAUgN,IAC/BgB,EAAYQ,EACRH,EAAkBrB,GAAcqB,EAAkBH,EAAUlO,OAC5DyO,EACEzB,EAAakB,EAAUlO,MACvBmO,EAAY,IAAIlO,KAAKiO,EAAUlO,O,KA/B2B,CAClE,MAAM0O,EACHpE,EAAyBwC,gBACzBE,GAAcA,EAAaA,GACzB9M,EAAkB+N,EAAUjO,SAC/B2N,EAAYe,EAAcT,EAAUjO,OAEjCE,EAAkBgO,EAAUlO,SAC/BgO,EAAYU,EAAcR,EAAUlO,M,CA2BxC,IAAI2N,GAAaK,KACfN,IACIC,EACFM,EAAUpG,QACVqG,EAAUrG,QACVpD,EACAA,IAEGkD,GAEH,OADAuF,EAAkB1C,EAAM3J,GAAOgH,SACxB2C,C,CAKb,IACGgC,GAAaC,KACbc,IACAvG,EAASgG,IAAgBV,GAAgBjM,MAAMC,QAAQ0M,IACxD,CACA,MAAM2B,EAAkB3C,GAAmBQ,GACrCoC,EAAkB5C,GAAmBS,GACrCkB,GACHzN,EAAkByO,EAAgB3O,QACnCgN,EAAWtJ,QAAUiL,EAAgB3O,MACjCgO,GACH9N,EAAkB0O,EAAgB5O,QACnCgN,EAAWtJ,QAAUkL,EAAgB5O,MAEvC,IAAI2N,GAAaK,KACfN,EACEC,EACAgB,EAAgB9G,QAChB+G,EAAgB/G,UAEbF,GAEH,OADAuF,EAAkB1C,EAAM3J,GAAOgH,SACxB2C,C,CAKb,GAAIoC,IAAYW,GAAWvG,EAASgG,GAAa,CAC/C,MAAQhN,MAAO6O,EAAY,QAAEhH,GAAYmE,GAAmBY,GAE5D,GAAI1B,GAAQ2D,KAAkB7B,EAAW8B,MAAMD,KAC7CrE,EAAM3J,IAAKiH,EAAAA,EAAAA,GAAA,CACThI,KAAM2E,EACNoD,UACAyC,OACGkD,EAAkB/I,EAAgCoD,KAElDF,GAEH,OADAuF,EAAkBrF,GACX2C,C,CAKb,GAAIqC,EACF,GAAIlC,GAAWkC,GAAW,CACxB,MACMkC,EAAgBjD,SADDe,EAASG,EAAY7F,GACK8F,GAE/C,GAAI8B,IACFvE,EAAM3J,IAAKiH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNiH,GACAvB,EACD/I,EACAsK,EAAclH,WAGbF,GAEH,OADAuF,EAAkB6B,EAAclH,SACzB2C,C,MAGN,GAAIpK,EAASyM,GAAW,CAC7B,IAAImC,EAAmB,CAAC,EAExB,IAAK,MAAM7M,KAAO0K,EAAU,CAC1B,IAAK9G,EAAciJ,KAAsBrH,EACvC,MAGF,MAAMoH,EAAgBjD,SACde,EAAS1K,GAAK6K,EAAY7F,GAChC8F,EACA9K,GAGE4M,IACFC,GAAgBlH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXiH,GACAvB,EAAkBrL,EAAK4M,EAAclH,UAG1CqF,EAAkB6B,EAAclH,SAE5BF,IACF6C,EAAM3J,GAAQmO,G,CAKpB,IAAKjJ,EAAciJ,KACjBxE,EAAM3J,IAAKiH,EAAAA,EAAAA,GAAA,CACTwC,IAAK2C,GACF+B,IAEArH,GACH,OAAO6C,C,CAOf,OADA0C,GAAkB,GACX1C,CAAK,EC3RdyE,GAAeA,CAAIpN,EAAW7B,IAAwB,IACjD6B,KACAyE,EAAsBtG,ICJ3BkP,GAAmBlP,GACjBK,MAAMC,QAAQN,GAASA,EAAMuH,KAAI,KAAe,SAAI9E,ECO9B,SAAA0M,GACtBtN,EACA2B,EACAxD,GAEA,MAAO,IACF6B,EAAK8H,MAAM,EAAGnG,MACd8C,EAAsBtG,MACtB6B,EAAK8H,MAAMnG,GAElB,CChBA,IAAA4L,GAAeA,CACbvN,EACAwN,EACAC,IAEKjP,MAAMC,QAAQuB,IAIfU,EAAYV,EAAKyN,MACnBzN,EAAKyN,QAAM7M,GAEbZ,EAAK0N,OAAOD,EAAI,EAAGzN,EAAK0N,OAAOF,EAAM,GAAG,IAEjCxN,GARE,GCNX2N,GAAeA,CAAI3N,EAAW7B,IAAwB,IACjDsG,EAAsBtG,MACtBsG,EAAsBzE,ICY3B,IAAA4N,GAAeA,CAAI5N,EAAW2B,IAC5BjB,EAAYiB,GACR,GAdN,SAA4B3B,EAAW6N,GACrC,IAAIC,EAAI,EACR,MAAMC,EAAO,IAAI/N,GAEjB,IAAK,MAAM2B,KAASkM,EAClBE,EAAKL,OAAO/L,EAAQmM,EAAG,GACvBA,IAGF,OAAOvN,EAAQwN,GAAMlM,OAASkM,EAAO,EACvC,CAKMC,CACEhO,EACCyE,EAAsB9C,GAAoBsM,MAAK,CAACC,EAAGC,IAAMD,EAAIC,KCrBtEC,GAAeA,CAAIpO,EAAWqO,EAAgBC,MAC3CtO,EAAKqO,GAASrO,EAAKsO,IAAW,CAACtO,EAAKsO,GAAStO,EAAKqO,GAAQ,ECyB/C,SAAUE,GAAMzN,EAAaC,GACzC,MAAMyN,EAAQhQ,MAAMC,QAAQsC,GACxBA,EACAM,EAAMN,GACJ,CAACA,GACDQ,EAAaR,GAEb0N,EAA+B,IAAjBD,EAAM3M,OAAef,EA3B3C,SAAiBA,EAAa4N,GAC5B,MAAM7M,EAAS6M,EAAW5G,MAAM,GAAI,GAAGjG,OACvC,IAAIF,EAAQ,EAEZ,KAAOA,EAAQE,GACbf,EAASJ,EAAYI,GAAUa,IAAUb,EAAO4N,EAAW/M,MAG7D,OAAOb,CACT,CAkBoD6N,CAAQ7N,EAAQ0N,GAE5D7M,EAAQ6M,EAAM3M,OAAS,EACvBvB,EAAMkO,EAAM7M,GAclB,OAZI8M,UACKA,EAAYnO,GAIT,IAAVqB,IACEpD,EAASkQ,IAAgBvK,EAAcuK,IACtCjQ,MAAMC,QAAQgQ,IA5BrB,SAAsBG,GACpB,IAAK,MAAMtO,KAAOsO,EAChB,GAAIA,EAAIlP,eAAeY,KAASI,EAAYkO,EAAItO,IAC9C,OAAO,EAGX,OAAO,CACT,CAqBqCuO,CAAaJ,KAE9CF,GAAMzN,EAAQ0N,EAAM1G,MAAM,GAAI,IAGzBhH,CACT,CCnDA,IAAAgO,GAAeA,CAAIC,EAAkBpN,EAAexD,KAClD4Q,EAAYpN,GAASxD,EACd4Q,GC8EH,SAAUC,GAMd/L,GAEA,MAAMgM,EAAUlM,KACV,QACJS,EAAUyL,EAAQzL,QAAO,KACzBxE,EAAI,QACJkQ,EAAU,KAAI,iBACdC,EAAgB,MAChBC,GACEnM,GACG+E,EAAQqH,GAAavM,EAAAA,SAAeU,EAAQ8L,eAAetQ,IAC5DuQ,EAAMzM,EAAAA,OACVU,EAAQ8L,eAAetQ,GAAM0G,IAAIS,IAE7BqJ,EAAY1M,EAAAA,OAAakF,GACzByH,EAAQ3M,EAAAA,OAAa9D,GACrB0Q,EAAY5M,EAAAA,QAAa,GAE/B2M,EAAM7K,QAAU5F,EAChBwQ,EAAU5K,QAAUoD,EACpBxE,EAAQ6B,OAAOsK,MAAMlK,IAAIzG,GAEzBoQ,GACG5L,EAAkCoM,SACjC5Q,EACAoQ,GAGJ1K,EAAa,CACXO,KAAM4K,IAMD,IANE,OACLlG,EACA3K,KAAM8Q,GAIPD,EACC,GAAIC,IAAmBL,EAAM7K,UAAYkL,EAAgB,CACvD,MAAMf,EAAclO,EAAI8I,EAAQ8F,EAAM7K,SAClCpG,MAAMC,QAAQsQ,KAChBM,EAAUN,GACVQ,EAAI3K,QAAUmK,EAAYrJ,IAAIS,G,GAIpCpB,QAASvB,EAAQuM,UAAUJ,QAG7B,MAAMK,EAAelN,EAAAA,aAMjBmN,IAEAP,EAAU9K,SAAU,EACpBpB,EAAQ0M,kBAAkBlR,EAAMiR,EAAwB,GAE1D,CAACzM,EAASxE,IA6QZ,OApGA8D,EAAAA,WAAgB,KAQd,GAPAU,EAAQ2M,OAAOlI,QAAS,EAExBR,EAAUzI,EAAMwE,EAAQ6B,SACtB7B,EAAQuM,UAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,GAAC,CAAC,EACzBzC,EAAQ6M,aAIbX,EAAU9K,WACRsC,EAAmB1D,EAAQ8M,SAASnJ,MAAMC,YAC1C5D,EAAQ6M,WAAWE,aAErB,GAAI/M,EAAQ8M,SAASE,SACnBhN,EAAQiN,eAAe,CAACzR,IAAO0R,MAAMzP,IACnC,MAAM0H,EAAQ9H,EAAII,EAAO8E,OAAQ/G,GAC3B2R,EAAgB9P,EAAI2C,EAAQ6M,WAAWtK,OAAQ/G,IAGnD2R,GACMhI,GAASgI,EAAc1S,MACxB0K,IACEgI,EAAc1S,OAAS0K,EAAM1K,MAC5B0S,EAAc3K,UAAY2C,EAAM3C,SACpC2C,GAASA,EAAM1K,QAEnB0K,EACIjH,EAAI8B,EAAQ6M,WAAWtK,OAAQ/G,EAAM2J,GACrC4F,GAAM/K,EAAQ6M,WAAWtK,OAAQ/G,GACrCwE,EAAQuM,UAAUK,MAAMnL,KAAK,CAC3Bc,OAAQvC,EAAQ6M,WAAWtK,S,QAI5B,CACL,MAAMqC,EAAevH,EAAI2C,EAAQoN,QAAS5R,IAExCoJ,IACAA,EAAMC,IAEJnB,EAAmB1D,EAAQ8M,SAASO,gBAAgBzJ,YACpDF,EAAmB1D,EAAQ8M,SAASnJ,MAAMC,YAG5CiD,GACEjC,EACA5E,EAAQ6B,OAAOP,SACftB,EAAQsN,YACRtN,EAAQ8M,SAASS,eAAiBzO,EAAgBK,IAClDa,EAAQ8M,SAAS9F,2BACjB,GACAkG,MACC/H,IACEzE,EAAcyE,IACfnF,EAAQuM,UAAUK,MAAMnL,KAAK,CAC3Bc,OAAQ2C,EACNlF,EAAQ6M,WAAWtK,OACnB4C,EACA3J,M,CAQdwE,EAAQuM,UAAUpG,OAAO1E,KAAK,CAC5BjG,OACA2K,QAAM1D,EAAAA,EAAAA,GAAA,GAAOzC,EAAQsN,eAGvBtN,EAAQ6B,OAAO2L,OACbjJ,EAAsBvE,EAAQoN,SAAS,CAACnI,EAAKnI,KAC3C,GACEkD,EAAQ6B,OAAO2L,OACf1Q,EAAIuH,WAAWrE,EAAQ6B,OAAO2L,QAC9BvI,EAAIuI,MAGJ,OADAvI,EAAIuI,QACG,CAEH,IAGVxN,EAAQ6B,OAAO2L,MAAQ,GAEvBxN,EAAQyN,eAERvB,EAAU9K,SAAU,CAAK,GACxB,CAACoD,EAAQhJ,EAAMwE,IAElBV,EAAAA,WAAgB,MACbjC,EAAI2C,EAAQsN,YAAa9R,IAASwE,EAAQ0M,kBAAkBlR,GAEtD,MACJwE,EAAQ8M,SAASnB,kBAAoBA,IACpC3L,EAAQ0N,WAAWlS,EAAgC,IAEtD,CAACA,EAAMwE,EAAS0L,EAASC,IAErB,CACLgC,KAAMrO,EAAAA,aA1LKqO,CAAC9C,EAAgBC,KAC5B,MAAM2B,EAA0BzM,EAAQ8L,eAAetQ,GACvDoP,GAAY6B,EAAyB5B,EAAQC,GAC7CF,GAAYmB,EAAI3K,QAASyJ,EAAQC,GACjC0B,EAAaC,GACbZ,EAAUY,GACVzM,EAAQ0M,kBACNlR,EACAiR,EACA7B,GACA,CACEgD,KAAM/C,EACNgD,KAAM/C,IAER,EACD,GA2K6B,CAAC0B,EAAchR,EAAMwE,IACnD8N,KAAMxO,EAAAA,aAzKKwO,CAAC9D,EAAcC,KAC1B,MAAMwC,EAA0BzM,EAAQ8L,eAAetQ,GACvDuO,GAAY0C,EAAyBzC,EAAMC,GAC3CF,GAAYgC,EAAI3K,QAAS4I,EAAMC,GAC/BuC,EAAaC,GACbZ,EAAUY,GACVzM,EAAQ0M,kBACNlR,EACAiR,EACA1C,GACA,CACE6D,KAAM5D,EACN6D,KAAM5D,IAER,EACD,GA0J6B,CAACuC,EAAchR,EAAMwE,IACnD+N,QAASzO,EAAAA,aArPKyO,CACdpT,EAGA0I,KAEA,MAAM2K,EAAe/M,EAAsB1E,EAAY5B,IACjD8R,EAA0BtC,GAC9BnK,EAAQ8L,eAAetQ,GACvBwS,GAEFhO,EAAQ6B,OAAO2L,MAAQpK,EAAkB5H,EAAM,EAAG6H,GAClD0I,EAAI3K,QAAU+I,GAAU4B,EAAI3K,QAAS4M,EAAa9L,IAAIS,IACtD6J,EAAaC,GACbZ,EAAUY,GACVzM,EAAQ0M,kBAAkBlR,EAAMiR,EAAyBtC,GAAW,CAClEyD,KAAM/D,GAAelP,IACrB,GAoOkC,CAAC6R,EAAchR,EAAMwE,IACzDiO,OAAQ3O,EAAAA,aA9QK2O,CACbtT,EAGA0I,KAEA,MAAM6K,EAAcjN,EAAsB1E,EAAY5B,IAChD8R,EAA0B7C,GAC9B5J,EAAQ8L,eAAetQ,GACvB0S,GAEFlO,EAAQ6B,OAAO2L,MAAQpK,EACrB5H,EACAiR,EAAwBpO,OAAS,EACjCgF,GAEF0I,EAAI3K,QAAUwI,GAASmC,EAAI3K,QAAS8M,EAAYhM,IAAIS,IACpD6J,EAAaC,GACbZ,EAAUY,GACVzM,EAAQ0M,kBAAkBlR,EAAMiR,EAAyB7C,GAAU,CACjEgE,KAAM/D,GAAelP,IACrB,GAyPgC,CAAC6R,EAAchR,EAAMwE,IACvDmO,OAAQ7O,EAAAA,aAnOMnB,IACd,MAAMsO,EAEArC,GAAcpK,EAAQ8L,eAAetQ,GAAO2C,GAClD4N,EAAI3K,QAAUgJ,GAAc2B,EAAI3K,QAASjD,GACzCqO,EAAaC,GACbZ,EAAUY,IACTzR,MAAMC,QAAQoC,EAAI2C,EAAQoN,QAAS5R,KAClC0C,EAAI8B,EAAQoN,QAAS5R,OAAM4B,GAC7B4C,EAAQ0M,kBAAkBlR,EAAMiR,EAAyBrC,GAAe,CACtEwD,KAAMzP,GACN,GAwNgC,CAACqO,EAAchR,EAAMwE,IACvD8J,OAAQxK,EAAAA,aAtNKwK,CACb3L,EACAxD,EAGA0I,KAEA,MAAM+K,EAAcnN,EAAsB1E,EAAY5B,IAChD8R,EAA0B3C,GAC9B9J,EAAQ8L,eAAetQ,GACvB2C,EACAiQ,GAEFpO,EAAQ6B,OAAO2L,MAAQpK,EAAkB5H,EAAM2C,EAAOkF,GACtD0I,EAAI3K,QAAU0I,GAASiC,EAAI3K,QAASjD,EAAOiQ,EAAYlM,IAAIS,IAC3D6J,EAAaC,GACbZ,EAAUY,GACVzM,EAAQ0M,kBAAkBlR,EAAMiR,EAAyB3C,GAAU,CACjE8D,KAAMzP,EACN0P,KAAMhE,GAAelP,IACrB,GAkMgC,CAAC6R,EAAchR,EAAMwE,IACvDqO,OAAQ/O,EAAAA,aA5JK+O,CACblQ,EACAxD,KAEA,MAAM2T,EAAc/R,EAAY5B,GAC1B8R,EAA0BnB,GAC9BtL,EAAQ8L,eAENtQ,GACF2C,EACAmQ,GAEFvC,EAAI3K,QAAU,IAAIqL,GAAyBvK,KAAI,CAACqM,EAAMjE,IACnDiE,GAAQjE,IAAMnM,EAAuB4N,EAAI3K,QAAQkJ,GAA3B3H,MAEzB6J,EAAaC,GACbZ,EAAU,IAAIY,IACdzM,EAAQ0M,kBACNlR,EACAiR,EACAnB,GACA,CACEsC,KAAMzP,EACN0P,KAAMS,IAER,GACA,EACD,GAiIiC,CAAC9B,EAAchR,EAAMwE,IACvD/B,QAASqB,EAAAA,aA9HT3E,IAIA,MAAM8R,EAA0BxL,EAAsB1E,EAAY5B,IAClEoR,EAAI3K,QAAUqL,EAAwBvK,IAAIS,GAC1C6J,EAAa,IAAIC,IACjBZ,EAAU,IAAIY,IACdzM,EAAQ0M,kBACNlR,EACA,IAAIiR,IACAjQ,GAAeA,GACnB,CAAC,GACD,GACA,EACD,GA+GmC,CAACgQ,EAAchR,EAAMwE,IACzDwE,OAAQlF,EAAAA,SACN,IACEkF,EAAOtC,KAAI,CAAC0C,EAAOzG,KAAKsE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnBmC,GAAK,IACR,CAAC8G,GAAUK,EAAI3K,QAAQjD,IAAUwE,SAErC,CAAC6B,EAAQkH,IAGf,CC/ZA,IAAA8C,GAAeA,KACb,IAAIC,EAA4B,GAqBhC,MAAO,CACL,aAAIC,GACF,OAAOD,C,EAEThN,KAvBY9G,IACZ,IAAK,MAAMgU,KAAYF,EACrBE,EAASlN,MAAQkN,EAASlN,KAAK9G,E,EAsBjC6G,UAlBiBmN,IACjBF,EAAWG,KAAKD,GACT,CACLjN,YAAaA,KACX+M,EAAaA,EAAWzR,QAAQ6R,GAAMA,IAAMF,GAAS,IAezDjN,YAVkBA,KAClB+M,EAAa,EAAE,EAUhB,ECxCHK,GAAgBnU,GACdE,EAAkBF,KAAWG,EAAaH,GCD9B,SAAUoU,GAAUC,EAAcC,GAC9C,GAAIH,GAAYE,IAAYF,GAAYG,GACtC,OAAOD,IAAYC,EAGrB,GAAIvU,EAAasU,IAAYtU,EAAauU,GACxC,OAAOD,EAAQE,YAAcD,EAAQC,UAGvC,MAAMC,EAAQ7O,OAAOK,KAAKqO,GACpBI,EAAQ9O,OAAOK,KAAKsO,GAE1B,GAAIE,EAAM9Q,SAAW+Q,EAAM/Q,OACzB,OAAO,EAGT,IAAK,MAAMvB,KAAOqS,EAAO,CACvB,MAAME,EAAOL,EAAQlS,GAErB,IAAKsS,EAAME,SAASxS,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,MAAMyS,EAAON,EAAQnS,GAErB,GACGpC,EAAa2U,IAAS3U,EAAa6U,IACnCxU,EAASsU,IAAStU,EAASwU,IAC3BvU,MAAMC,QAAQoU,IAASrU,MAAMC,QAAQsU,IACjCR,GAAUM,EAAME,GACjBF,IAASE,EAEb,OAAO,C,EAKb,OAAO,CACT,CC1CA,IAAAC,GAAgBhV,GACG,oBAAjBA,EAAQC,KCEVwN,GAAgBhD,GACdW,GAAaX,IAAQ1K,EAAgB0K,GCFvCwK,GAAgBxK,GAAaM,GAAcN,IAAQA,EAAIyK,YCFvDC,GAAmBnT,IACjB,IAAK,MAAMM,KAAON,EAChB,GAAI8I,GAAW9I,EAAKM,IAClB,OAAO,EAGX,OAAO,CAAK,ECDd,SAAS8S,GAAmBpT,GAAyC,IAAhCgI,EAAArE,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAA8B,CAAC,EAClE,MAAM0P,EAAoB7U,MAAMC,QAAQuB,GAExC,GAAIzB,EAASyB,IAASqT,EACpB,IAAK,MAAM/S,KAAON,EAEdxB,MAAMC,QAAQuB,EAAKM,KAClB/B,EAASyB,EAAKM,MAAU6S,GAAkBnT,EAAKM,KAEhD0H,EAAO1H,GAAO9B,MAAMC,QAAQuB,EAAKM,IAAQ,GAAK,CAAC,EAC/C8S,GAAgBpT,EAAKM,GAAM0H,EAAO1H,KACxBjC,EAAkB2B,EAAKM,MACjC0H,EAAO1H,IAAO,GAKpB,OAAO0H,CACT,CAEA,SAASsL,GACPtT,EACAsF,EACAiO,GAKA,MAAMF,EAAoB7U,MAAMC,QAAQuB,GAExC,GAAIzB,EAASyB,IAASqT,EACpB,IAAK,MAAM/S,KAAON,EAEdxB,MAAMC,QAAQuB,EAAKM,KAClB/B,EAASyB,EAAKM,MAAU6S,GAAkBnT,EAAKM,IAG9CI,EAAY4E,IACZgN,GAAYiB,EAAsBjT,IAElCiT,EAAsBjT,GAAO9B,MAAMC,QAAQuB,EAAKM,IAC5C8S,GAAgBpT,EAAKM,GAAM,KAAG2F,EAAAA,EAAAA,GAAA,GACzBmN,GAAgBpT,EAAKM,KAE9BgT,GACEtT,EAAKM,GACLjC,EAAkBiH,GAAc,CAAC,EAAIA,EAAWhF,GAChDiT,EAAsBjT,IAI1BiT,EAAsBjT,IAAQiS,GAAUvS,EAAKM,GAAMgF,EAAWhF,IAKpE,OAAOiT,CACT,CAEA,IAAAC,GAAeA,CAAI5P,EAAkB0B,IACnCgO,GACE1P,EACA0B,EACA8N,GAAgB9N,IClEpBmO,GAAeA,CACbtV,EAAQuV,KAAA,IACR,cAAEzI,EAAa,YAAEsB,EAAW,WAAEoH,GAAyBD,EAAA,OAEvDhT,EAAYvC,GACRA,EACA8M,EACY,KAAV9M,EACEyV,IACAzV,GACGA,EACDA,EACJoO,GAAepH,EAAShH,GACtB,IAAIC,KAAKD,GACTwV,EACEA,EAAWxV,GACXA,CAAK,ECTO,SAAA0V,GAAcxL,GACpC,MAAMI,EAAMJ,EAAGI,IAEf,OAAII,GAAYJ,GACPA,EAAIqL,MAGT1K,GAAaX,GACRsB,GAAc1B,EAAGG,MAAMrK,MAG5B6U,GAAiBvK,GACZ,IAAIA,EAAIsL,iBAAiBrO,KAAIsO,IAAA,IAAC,MAAE7V,GAAO6V,EAAA,OAAK7V,CAAK,IAGtDJ,EAAW0K,GACNiB,GAAiBrB,EAAGG,MAAMrK,MAG5BsV,GAAgB/S,EAAY+H,EAAItK,OAASkK,EAAGI,IAAItK,MAAQsK,EAAItK,MAAOkK,EAC5E,CCpBA,IAAA4L,GAAeA,CACb/L,EACA0I,EACAG,EACAvG,KAEA,MAAMxC,EAAiD,CAAC,EAExD,IAAK,MAAMhJ,KAAQkJ,EAAa,CAC9B,MAAME,EAAevH,EAAI+P,EAAS5R,GAElCoJ,GAAS1G,EAAIsG,EAAQhJ,EAAMoJ,EAAMC,G,CAGnC,MAAO,CACL0I,eACAhS,MAAO,IAAImJ,GACXF,SACAwC,4BACD,ECrBH0J,GACEC,GAEAzT,EAAYyT,GACRA,EACA9K,GAAQ8K,GACNA,EAAKC,OACL7V,EAAS4V,GACP9K,GAAQ8K,EAAKhW,OACXgW,EAAKhW,MAAMiW,OACXD,EAAKhW,MACPgW,EChBV,MAAME,GAAiB,gBAEvB,IAAAC,GAAgBC,KACZA,KACAA,EAAevJ,aAEdlC,GAAWyL,EAAevJ,WACzBuJ,EAAevJ,SAASxL,YAAYR,OAASqV,IAC9C9V,EAASgW,EAAevJ,WACvBlH,OAAO6F,OAAO4K,EAAevJ,UAAUxG,MACpCgQ,GACCA,EAAiBhV,YAAYR,OAASqV,MCbhDI,GAAgB5N,GACdA,EAAQqE,QACPrE,EAAQ6D,UACP7D,EAAQgE,KACRhE,EAAQiE,KACRjE,EAAQ8D,WACR9D,EAAQ+D,WACR/D,EAAQkE,SACRlE,EAAQmE,UCNY,SAAA0J,GACtB3O,EACA6K,EACA5R,GAKA,MAAM2J,EAAQ9H,EAAIkF,EAAQ/G,GAE1B,GAAI2J,GAAStH,EAAMrC,GACjB,MAAO,CACL2J,QACA3J,QAIJ,MAAMD,EAAQC,EAAKkC,MAAM,KAEzB,KAAOnC,EAAM8C,QAAQ,CACnB,MAAM8D,EAAY5G,EAAM4V,KAAK,KACvBvM,EAAQvH,EAAI+P,EAASjL,GACrBiP,EAAa/T,EAAIkF,EAAQJ,GAE/B,GAAIyC,IAAU5J,MAAMC,QAAQ2J,IAAUpJ,IAAS2G,EAC7C,MAAO,CAAE3G,QAGX,GAAI4V,GAAcA,EAAW3W,KAC3B,MAAO,CACLe,KAAM2G,EACNgD,MAAOiM,GAIX7V,EAAM8V,K,CAGR,MAAO,CACL7V,OAEJ,CC3CA,IAAA8V,GAAeA,CACbpN,EACAqN,EACAxE,EACAM,EAIA1J,KAEIA,EAAKI,WAEGgJ,GAAepJ,EAAKK,YACrBuN,GAAarN,IACb6I,EAAcM,EAAexJ,SAAWF,EAAKE,WAC9CK,IACC6I,EAAcM,EAAevJ,WAAaH,EAAKG,aACjDI,GCfXsN,GAAeA,CAAIvM,EAAQzJ,KACxBuB,EAAQM,EAAI4H,EAAKzJ,IAAO6C,QAAU0M,GAAM9F,EAAKzJ,GCkFhD,MAAMiW,GAAiB,CACrB9N,KAAM7E,EAAgBG,SACtBoO,eAAgBvO,EAAgBE,SAChC0S,kBAAkB,GAGJ,SAAAC,KAIkC,IAyC5CC,EAzCJnS,EAAAU,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAA8C,CAAC,EAE3C2M,GAAQrK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACPgP,IACAhS,GAEDoN,EAAsC,CACxCgF,YAAa,EACbC,SAAS,EACTC,UAAWzM,GAAWwH,EAAS1M,eAC/B4R,cAAc,EACdjF,aAAa,EACbkF,cAAc,EACdC,oBAAoB,EACpBlM,SAAS,EACTmM,cAAe,CAAC,EAChBC,YAAa,CAAC,EACdC,iBAAkB,CAAC,EACnB9P,OAAQuK,EAASvK,QAAU,CAAC,EAC5BjB,SAAUwL,EAASxL,WAAY,GAE7B8L,EAAqB,CAAC,EACtB/M,GACFtF,EAAS+R,EAAS1M,gBAAkBrF,EAAS+R,EAAS3G,UAClD5J,EAAYuQ,EAAS1M,eAAiB0M,EAAS3G,SAC/C,CAAC,EACHmH,EAAcR,EAASnB,iBACvB,CAAC,EACDpP,EAAY8D,GACZsM,EAAS,CACXlI,QAAQ,EACRiD,OAAO,EACP1F,OAAO,GAELH,EAAgB,CAClB6F,MAAO,IAAI9K,IACX0E,SAAU,IAAI1E,IACd0V,QAAS,IAAI1V,IACbuP,MAAO,IAAIvP,IACXoF,MAAO,IAAIpF,KAGT2V,EAAQ,EACZ,MAAM9R,EAAiC,CACrCqR,SAAS,EACTM,aAAa,EACbC,kBAAkB,EAClBF,eAAe,EACfH,cAAc,EACdhM,SAAS,EACTzD,QAAQ,GAEJgK,EAAoC,CACxCpG,OAAQqI,KACRrC,MAAOqC,KACP5B,MAAO4B,MAEHgE,EAA6B9O,EAAmBoJ,EAASnJ,MACzD8O,EAA4B/O,EAAmBoJ,EAASO,gBACxDqF,EACJ5F,EAASS,eAAiBzO,EAAgBK,IAStCsO,EAAe3G,UACnB,IAAKgG,EAASxL,WAAab,EAAgBuF,SAAW2M,GAAoB,CACxE,MAAM3M,EAAU8G,EAASE,SACrBtM,SAAqBuM,KAAkB1K,cACjCqQ,EAAyBxF,GAAS,GAExCpH,IAAY6G,EAAW7G,SACzBuG,EAAUK,MAAMnL,KAAK,CACnBuE,W,GAMF6M,EAAsBA,CAACtX,EAAkByW,KAE1ClF,EAASxL,WACTb,EAAgBuR,eAAgBvR,EAAgB4R,oBAEhD9W,GAASP,MAAMgP,KAAKnI,EAAO6F,QAAQoL,SAAStX,IACvCA,IACFwW,EACI9T,EAAI2O,EAAWwF,iBAAkB7W,EAAMwW,GACvCjH,GAAM8B,EAAWwF,iBAAkB7W,G,IAI3C+Q,EAAUK,MAAMnL,KAAK,CACnB4Q,iBAAkBxF,EAAWwF,iBAC7BL,cAAetR,EAAcmM,EAAWwF,oB,EA6ExCU,EAAsBA,CAC1BvX,EACAwX,EACArY,EACAsK,KAEA,MAAML,EAAevH,EAAI+P,EAAS5R,GAElC,GAAIoJ,EAAO,CACT,MAAMpH,EAAeH,EACnBiQ,EACA9R,EACA0B,EAAYvC,GAAS0C,EAAIgD,EAAgB7E,GAAQb,GAGnDuC,EAAYM,IACXyH,GAAQA,EAAyBgO,gBAClCD,EACI9U,EACEoP,EACA9R,EACAwX,EAAuBxV,EAAe6S,GAAczL,EAAMC,KAE5DqO,EAAc1X,EAAMgC,GAExBmP,EAAOjF,OAAS+F,G,GAId0F,EAAsBA,CAC1B3X,EACA4X,EACAlP,EACAmP,EACAC,KAIA,IAAIC,GAAoB,EACpBC,GAAkB,EACtB,MAAMC,EAA8D,CAClEjY,QAGF,IAAKsR,EAASxL,SAAU,CACtB,MAAMoS,KACJrW,EAAI+P,EAAS5R,IACb6B,EAAI+P,EAAS5R,GAAMqJ,IACnBxH,EAAI+P,EAAS5R,GAAMqJ,GAAGvD,UAExB,IAAK4C,GAAemP,EAAa,CAC3B5S,EAAgBqR,UAClB0B,EAAkB3G,EAAWiF,QAC7BjF,EAAWiF,QAAU2B,EAAO3B,QAAU6B,IACtCJ,EAAoBC,IAAoBC,EAAO3B,SAGjD,MAAM8B,EACJF,GAAiB3E,GAAU1R,EAAIgD,EAAgB7E,GAAO4X,GAExDI,IACGE,IAAiBrW,EAAIwP,EAAWuF,YAAa5W,IAEhDoY,GAA0BF,EACtB3I,GAAM8B,EAAWuF,YAAa5W,GAC9B0C,EAAI2O,EAAWuF,YAAa5W,GAAM,GACtCiY,EAAOrB,YAAcvF,EAAWuF,YAChCmB,EACEA,GACC9S,EAAgB2R,aACfoB,KAAqBI,C,CAG3B,GAAI1P,EAAa,CACf,MAAM2P,EAAyBxW,EAAIwP,EAAWsF,cAAe3W,GAExDqY,IACH3V,EAAI2O,EAAWsF,cAAe3W,EAAM0I,GACpCuP,EAAOtB,cAAgBtF,EAAWsF,cAClCoB,EACEA,GACC9S,EAAgB0R,eACf0B,IAA2B3P,E,CAInCqP,GAAqBD,GAAgB/G,EAAUK,MAAMnL,KAAKgS,E,CAG5D,OAAOF,EAAoBE,EAAS,CAAC,CAAC,EAGlCK,EAAsBA,CAC1BtY,EACAwK,EACAb,EACA4O,KAMA,MAAMC,EAAqB3W,EAAIwP,EAAWtK,OAAQ/G,GAC5CmX,EACJlS,EAAgBuF,SAChBpI,EAAUoI,IACV6G,EAAW7G,UAAYA,EA1NJiO,MAuOrB,GAXInH,EAASoH,YAAc/O,GA5NN8O,EA6NW,IA5HbE,EAAC3Y,EAAyB2J,KAC7CjH,EAAI2O,EAAWtK,OAAQ/G,EAAM2J,GAC7BoH,EAAUK,MAAMnL,KAAK,CACnBc,OAAQsK,EAAWtK,QACnB,EAwHoC4R,CAAa3Y,EAAM2J,GAAvDyM,EA5NDwC,IACCC,aAAa9B,GACbA,EAAQ+B,WAAWL,EAAUG,EAAK,EA2NlCxC,EAAmB9E,EAASoH,cAE5BG,aAAa9B,GACbX,EAAqB,KACrBzM,EACIjH,EAAI2O,EAAWtK,OAAQ/G,EAAM2J,GAC7B4F,GAAM8B,EAAWtK,OAAQ/G,KAI5B2J,GAAS4J,GAAUiF,EAAoB7O,GAAS6O,KAChDtT,EAAcqT,IACfpB,EACA,CACA,MAAM4B,GAAgB9R,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBsR,GACCpB,GAAqB/U,EAAUoI,GAAW,CAAEA,WAAY,CAAC,GAAC,IAC9DzD,OAAQsK,EAAWtK,OACnB/G,SAGFqR,GAAUpK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACLoK,GACA0H,GAGLhI,EAAUK,MAAMnL,KAAK8S,E,GAInBtH,EAAiBnG,UACrB+L,EAAoBrX,GAAM,GAC1B,MAAMiC,QAAeqP,EAASE,SAC5BM,EACAR,EAAS0H,QACT/D,GACEjV,GAAQqG,EAAO6F,MACf0F,EACAN,EAASS,aACTT,EAAS9F,4BAIb,OADA6L,EAAoBrX,GACbiC,CAAM,EAoBTmV,EAA2B9L,eAC/BtC,EACAiQ,GAME,IALFD,EAEIrU,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,IACFuU,OAAO,GAGT,IAAK,MAAMlZ,KAAQgJ,EAAQ,CACzB,MAAMI,EAAQJ,EAAOhJ,GAErB,GAAIoJ,EAAO,CACT,MAAM,GAAEC,GAAsBD,EAAfwO,GAAUzT,EAAAA,EAAAA,GAAKiF,EAAc+P,GAE5C,GAAI9P,EAAI,CACN,MAAM+P,EAAmB/S,EAAOsK,MAAM1Q,IAAIoJ,EAAGrJ,MACvCqZ,EACJjQ,EAAMC,IAAMiM,GAAsBlM,EAAgBC,IAEhDgQ,GAAqBpU,EAAgB4R,kBACvCQ,EAAoB,CAACrX,IAAO,GAG9B,MAAMsZ,QAAmBjO,GACvBjC,EACA/C,EAAOP,SACPgM,EACAoF,EACA5F,EAAS9F,4BAA8ByN,EACvCG,GAOF,GAJIC,GAAqBpU,EAAgB4R,kBACvCQ,EAAoB,CAACrX,IAGnBsZ,EAAWjQ,EAAGrJ,QAChBgZ,EAAQE,OAAQ,EACZD,GACF,OAIHA,IACEpX,EAAIyX,EAAYjQ,EAAGrJ,MAChBoZ,EACE1P,EACE2H,EAAWtK,OACXuS,EACAjQ,EAAGrJ,MAEL0C,EAAI2O,EAAWtK,OAAQsC,EAAGrJ,KAAMsZ,EAAWjQ,EAAGrJ,OAChDuP,GAAM8B,EAAWtK,OAAQsC,EAAGrJ,M,EAGnCkF,EAAc0S,UACNR,EACLQ,EACAqB,EACAD,E,EAKR,OAAOA,EAAQE,KACjB,EAgBMf,EAAwBA,CAACnY,EAAMgB,KAClCsQ,EAASxL,WACT9F,GAAQgB,GAAQ0B,EAAIoP,EAAa9R,EAAMgB,IACvCuS,GAAUgG,KAAa1U,IAEpB2U,EAAyCA,CAC7CzZ,EACAiC,EACAuE,IAEAH,EACErG,EACAsG,GAAMY,EAAAA,EAAAA,GAAA,GAEAkK,EAAOjF,MACP4F,EACApQ,EAAYM,GACV6C,EACAsB,EAASpG,GACP,CAAE,CAACA,GAAQiC,GACXA,GAEVuE,EACAvE,GAcE0V,EAAgB,SACpB1X,EACAb,GAEE,IADF0I,EAAAlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAA0B,CAAC,EAE3B,MAAMyE,EAAevH,EAAI+P,EAAS5R,GAClC,IAAI4X,EAAsBzY,EAE1B,GAAIiK,EAAO,CACT,MAAMmM,EAAiBnM,EAAMC,GAEzBkM,KACDA,EAAezP,UACdpD,EAAIoP,EAAa9R,EAAMyU,GAAgBtV,EAAOoW,IAEhDqC,EACE7N,GAAcwL,EAAe9L,MAAQpK,EAAkBF,GACnD,GACAA,EAEF6U,GAAiBuB,EAAe9L,KAClC,IAAI8L,EAAe9L,IAAI5B,SAASyP,SAC7BmC,GACEA,EAAUC,SACT9B,EACA9D,SAAS2F,EAAUta,SAEhBoW,EAAe/L,KACpBzK,EAAgBwW,EAAe9L,KACjC8L,EAAe/L,KAAK3G,OAAS,EACzB0S,EAAe/L,KAAK8N,SACjBqC,KACGA,EAAYlC,iBAAmBkC,EAAY7T,YAC5C6T,EAAY9Z,QAAUL,MAAMC,QAAQmY,KAC9BA,EAAkBpS,MAClBxE,GAAiBA,IAAS2Y,EAAYxa,QAEzCyY,IAAe+B,EAAYxa,SAEnCoW,EAAe/L,KAAK,KACnB+L,EAAe/L,KAAK,GAAG3J,UAAY+X,GAExCrC,EAAe/L,KAAK8N,SACjBsC,GACEA,EAAS/Z,QAAU+Z,EAASza,QAAUyY,IAGpC/N,GAAY0L,EAAe9L,KACpC8L,EAAe9L,IAAItK,MAAQ,IAE3BoW,EAAe9L,IAAItK,MAAQyY,EAEtBrC,EAAe9L,IAAIxK,MACtB8R,EAAUpG,OAAO1E,KAAK,CACpBjG,OACA2K,QAAM1D,EAAAA,EAAAA,GAAA,GAAO6K,M,EAOtBjK,EAAQgQ,aAAehQ,EAAQgS,cAC9BlC,EACE3X,EACA4X,EACA/P,EAAQgS,YACRhS,EAAQgQ,aACR,GAGJhQ,EAAQiS,gBAAkBC,GAAQ/Z,EACpC,EAEMga,EAAYA,CAKhBha,EACAb,EACA0I,KAEA,IAAK,MAAMoS,KAAY9a,EAAO,CAC5B,MAAMyY,EAAazY,EAAM8a,GACnBtT,EAAY,GAAHqB,OAAMhI,EAAI,KAAAgI,OAAIiS,GACvB7Q,EAAQvH,EAAI+P,EAASjL,IAE1BN,EAAOsK,MAAM1Q,IAAID,IAChBT,EAASqY,IACRxO,IAAUA,EAAMC,MAClBnK,EAAa0Y,GACVoC,EAAUrT,EAAWiR,EAAY/P,GACjC6P,EAAc/Q,EAAWiR,EAAY/P,E,GAIvCqS,EAA0C,SAC9Cla,EACAb,GAEE,IADF0I,EAAOlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEX,MAAMyE,EAAQvH,EAAI+P,EAAS5R,GACrByL,EAAepF,EAAOsK,MAAM1Q,IAAID,GAChCma,EAAapZ,EAAY5B,GAE/BuD,EAAIoP,EAAa9R,EAAMma,GAEnB1O,GACFsF,EAAUJ,MAAM1K,KAAK,CACnBjG,OACA2K,QAAM1D,EAAAA,EAAAA,GAAA,GAAO6K,MAIZ7M,EAAgBqR,SAAWrR,EAAgB2R,cAC5C/O,EAAQgQ,aAER9G,EAAUK,MAAMnL,KAAK,CACnBjG,OACA4W,YAAapC,GAAe3P,EAAgBiN,GAC5CwE,QAAS6B,EAAUnY,EAAMma,OAI7B/Q,GAAUA,EAAMC,IAAOhK,EAAkB8a,GAErCzC,EAAc1X,EAAMma,EAAYtS,GADhCmS,EAAUha,EAAMma,EAAYtS,GAIlCY,EAAUzI,EAAMqG,IAAW0K,EAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,GAAC,CAAC,EAAIoK,IACrDN,EAAUpG,OAAO1E,KAAK,CACpBjG,KAAMmR,EAAOjF,MAAQlM,OAAO4B,EAC5B+I,QAAM1D,EAAAA,EAAAA,GAAA,GAAO6K,IAEjB,EAEMtO,GAA0B8H,UAC9B6F,EAAOjF,OAAQ,EACf,MAAMtM,EAASD,EAAMC,OACrB,IAAII,EAAOJ,EAAOI,KACdoa,GAAsB,EAC1B,MAAMhR,EAAevH,EAAI+P,EAAS5R,GAG5Bqa,EAA8BzC,IAClCwC,EACEE,OAAOrX,MAAM2U,IACZ1Y,EAAa0Y,IAAe3U,MAAM2U,EAAWlE,YAC9CH,GAAUqE,EAAY/V,EAAIiQ,EAAa9R,EAAM4X,GAAY,EAG7D,GAAIxO,EAAO,CACT,IAAIO,EACAa,EACJ,MAAMoN,EAXNhY,EAAOX,KAAO4V,GAAczL,EAAMC,IAAM3J,EAAcC,GAYhD+I,EACJ/I,EAAMV,OAASiE,EAAOC,MAAQxD,EAAMV,OAASiE,EAAOE,UAChDmX,GACF9E,GAAcrM,EAAMC,MACnBiI,EAASE,WACT3P,EAAIwP,EAAWtK,OAAQ/G,KACvBoJ,EAAMC,GAAGmR,MACZ1E,GACEpN,EACA7G,EAAIwP,EAAWsF,cAAe3W,GAC9BqR,EAAWE,YACX0F,EACAD,GAEEyD,EAAUhS,EAAUzI,EAAMqG,EAAQqC,GAExChG,EAAIoP,EAAa9R,EAAM4X,GAEnBlP,GACFU,EAAMC,GAAG9F,QAAU6F,EAAMC,GAAG9F,OAAO5D,GACnCyW,GAAsBA,EAAmB,IAChChN,EAAMC,GAAG7F,UAClB4F,EAAMC,GAAG7F,SAAS7D,GAGpB,MAAM4Y,EAAaZ,EACjB3X,EACA4X,EACAlP,GACA,GAGIoP,GAAgB5S,EAAcqT,IAAekC,EASnD,IAPC/R,GACCqI,EAAUpG,OAAO1E,KAAK,CACpBjG,OACAf,KAAMU,EAAMV,KACZ0L,QAAM1D,EAAAA,EAAAA,GAAA,GAAO6K,KAGbyI,EASF,OARItV,EAAgBuF,UACI,WAAlB8G,EAASnJ,MAAqBO,EAChCuJ,IACUvJ,GACVuJ,KAKF6F,GACA/G,EAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,GAAC,CAAEjH,QAAUya,EAAU,CAAC,EAAIlC,IAMpD,IAFC7P,GAAe+R,GAAW1J,EAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,GAAC,CAAC,EAAIoK,IAEjDC,EAASE,SAAU,CACrB,MAAM,OAAEzK,SAAiB0K,EAAe,CAACzR,IAIzC,GAFAqa,EAA2BzC,GAEvBwC,EAAqB,CACvB,MAAMM,EAA4BhF,GAChCrE,EAAWtK,OACX6K,EACA5R,GAEI2a,EAAoBjF,GACxB3O,EACA6K,EACA8I,EAA0B1a,MAAQA,GAGpC2J,EAAQgR,EAAkBhR,MAC1B3J,EAAO2a,EAAkB3a,KAEzBwK,EAAUtF,EAAc6B,E,OAG1BsQ,EAAoB,CAACrX,IAAO,GAC5B2J,SACQ0B,GACJjC,EACA/C,EAAOP,SACPgM,EACAoF,EACA5F,EAAS9F,4BAEXxL,GACFqX,EAAoB,CAACrX,IAErBqa,EAA2BzC,GAEvBwC,IACEzQ,EACFa,GAAU,EACDvF,EAAgBuF,UACzBA,QAAgB4M,EAAyBxF,GAAS,KAKpDwI,IACFhR,EAAMC,GAAGmR,MACPT,GACE3Q,EAAMC,GAAGmR,MAIblC,EAAoBtY,EAAMwK,EAASb,EAAO4O,G,GAK1CqC,GAAcA,CAACnR,EAAUnI,KAC7B,GAAIO,EAAIwP,EAAWtK,OAAQzF,IAAQmI,EAAIuI,MAErC,OADAvI,EAAIuI,QACG,CAEH,EAGF+H,GAAwCzO,eAAOtL,GAAsB,IACrEwK,EACA2D,EAFqDtG,EAAOlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EAGpE,MAAMkW,EAAapV,EAAsBzF,GAEzC,GAAIsR,EAASE,SAAU,CACrB,MAAMzK,OAta0BuE,WAClC,MAAM,OAAEvE,SAAiB0K,EAAe1R,GAExC,GAAIA,EACF,IAAK,MAAMC,KAAQD,EAAO,CACxB,MAAM4J,EAAQ9H,EAAIkF,EAAQ/G,GAC1B2J,EACIjH,EAAI2O,EAAWtK,OAAQ/G,EAAM2J,GAC7B4F,GAAM8B,EAAWtK,OAAQ/G,E,MAG/BqR,EAAWtK,OAASA,EAGtB,OAAOA,CAAM,EAwZU+T,CACnBpZ,EAAY1B,GAAQA,EAAO6a,GAG7BrQ,EAAUtF,EAAc6B,GACxBoH,EAAmBnO,GACd6a,EAAWlS,MAAM3I,GAAS6B,EAAIkF,EAAQ/G,KACvCwK,C,MACKxK,GACTmO,SACQ4M,QAAQpX,IACZkX,EAAWnU,KAAI4E,UACb,MAAMlC,EAAQvH,EAAI+P,EAASjL,GAC3B,aAAayQ,EACXhO,GAASA,EAAMC,GAAK,CAAE,CAAC1C,GAAYyC,GAAUA,EAC9C,MAGL8B,MAAMzJ,UACL0M,GAAqBkD,EAAW7G,UAAYyH,KAE/C9D,EAAmB3D,QAAgB4M,EAAyBxF,GAoB9D,OAjBAb,EAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,GACfd,EAASnG,IACbiF,EAAgBuF,SAAWA,IAAY6G,EAAW7G,QAC/C,CAAC,EACD,CAAExK,SACFsR,EAASE,WAAaxR,EAAO,CAAEwK,WAAY,CAAC,GAAC,IACjDzD,OAAQsK,EAAWtK,UAGrBc,EAAQC,cACLqG,GACDpF,EACE6I,EACAgJ,GACA5a,EAAO6a,EAAaxU,EAAO6F,OAGxBiC,CACT,EAEMoL,GACJsB,IAIA,MAAMlQ,GAAM1D,EAAAA,EAAAA,GAAA,GACNkK,EAAOjF,MAAQ4F,EAAcjN,GAGnC,OAAOnD,EAAYmZ,GACflQ,EACAxE,EAAS0U,GACPhZ,EAAI8I,EAAQkQ,GACZA,EAAWnU,KAAK1G,GAAS6B,EAAI8I,EAAQ3K,IAAM,EAG7Cgb,GAAoDA,CACxDhb,EACAuE,KAAS,CAET0W,UAAWpZ,GAAK0C,GAAa8M,GAAYtK,OAAQ/G,GACjDsW,UAAWzU,GAAK0C,GAAa8M,GAAYuF,YAAa5W,GACtD2J,MAAO9H,GAAK0C,GAAa8M,GAAYtK,OAAQ/G,GAC7CwW,eAAgB3U,EAAIwP,EAAWwF,iBAAkB7W,GACjD+V,YAAalU,GAAK0C,GAAa8M,GAAYsF,cAAe3W,KActDkb,GAA0CA,CAAClb,EAAM2J,EAAO9B,KAC5D,MAAM4B,GAAO5H,EAAI+P,EAAS5R,EAAM,CAAEqJ,GAAI,CAAC,IAAKA,IAAM,CAAC,GAAGI,IAChD0R,EAAetZ,EAAIwP,EAAWtK,OAAQ/G,IAAS,CAAC,GAG9CyJ,IAAK2R,EAAU,QAAEpU,EAAO,KAAE/H,GAA6Bkc,EAApBE,GAAelX,EAAAA,EAAAA,GAAKgX,EAAYG,GAE3E5Y,EAAI2O,EAAWtK,OAAQ/G,GAAIiH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBoU,GACA1R,GAAK,IACRF,SAGFsH,EAAUK,MAAMnL,KAAK,CACnBjG,OACA+G,OAAQsK,EAAWtK,OACnByD,SAAS,IAGX3C,GAAWA,EAAQC,aAAe2B,GAAOA,EAAIuI,OAASvI,EAAIuI,OAAO,EA4B7DE,GAA8C,SAAClS,GAAsB,IAAhB6H,EAAOlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpE,IAAK,MAAMgC,KAAa3G,EAAOyF,EAAsBzF,GAAQqG,EAAO6F,MAClE7F,EAAO6F,MAAMqP,OAAO5U,GACpBN,EAAOsK,MAAM4K,OAAO5U,GAEfkB,EAAQ2T,YACXjM,GAAMqC,EAASjL,GACf4I,GAAMuC,EAAanL,KAGpBkB,EAAQ4T,WAAalM,GAAM8B,EAAWtK,OAAQJ,IAC9CkB,EAAQ6T,WAAanM,GAAM8B,EAAWuF,YAAajQ,IACnDkB,EAAQ8T,aAAepM,GAAM8B,EAAWsF,cAAehQ,IACvDkB,EAAQ+T,kBACPrM,GAAM8B,EAAWwF,iBAAkBlQ,IACpC2K,EAASnB,mBACPtI,EAAQgU,kBACTtM,GAAM1K,EAAgB8B,GAG1BoK,EAAUpG,OAAO1E,KAAK,CACpB0E,QAAM1D,EAAAA,EAAAA,GAAA,GAAO6K,KAGff,EAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACjBoK,GACExJ,EAAQ6T,UAAiB,CAAEpF,QAAS6B,KAAhB,CAAC,KAG3BtQ,EAAQiU,aAAe7J,GAC1B,EAEM8J,GAAsEC,IAKvE,IALwE,SAC3ElW,EAAQ,KACR9F,EAAI,MACJoJ,EAAK,OACLJ,GACDgT,GAEI5Z,EAAU0D,IAAaqL,EAAOjF,OAC7BpG,GACFO,EAAOP,SAAS7F,IAAID,MAEpB8F,EAAWO,EAAOP,SAASW,IAAIzG,GAAQqG,EAAOP,SAASyV,OAAOvb,GAE9D2X,EACE3X,EACA6U,GAAczL,EAAQA,EAAMC,GAAKxH,EAAImH,EAAQhJ,GAAMqJ,KACnD,GACA,GACA,G,EAKAuH,GAA0C,SAAC5Q,GAAsB,IAAhB6H,EAAOlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5DyE,EAAQvH,EAAI+P,EAAS5R,GACzB,MAAMic,EACJ7Z,EAAUyF,EAAQ/B,WAAa1D,EAAUkP,EAASxL,UAyBpD,OAvBApD,EAAIkP,EAAS5R,GAAIiH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXmC,GAAS,CAAC,GAAC,IACfC,IAAEpC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACImC,GAASA,EAAMC,GAAKD,EAAMC,GAAK,CAAEI,IAAK,CAAEzJ,UAAQ,IACpDA,OACAkM,OAAO,GACJrE,MAGPxB,EAAO6F,MAAMzF,IAAIzG,GAEboJ,EACF2S,GAAqB,CACnB3S,QACAtD,SAAU1D,EAAUyF,EAAQ/B,UACxB+B,EAAQ/B,SACRwL,EAASxL,SACb9F,SAGFuX,EAAoBvX,GAAM,EAAM6H,EAAQ1I,QAG1C8H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMgV,EACA,CAAEnW,SAAU+B,EAAQ/B,UAAYwL,EAASxL,UACzC,CAAC,GACDwL,EAAS4K,YACT,CACExQ,WAAY7D,EAAQ6D,SACpBG,IAAKqJ,GAAarN,EAAQgE,KAC1BC,IAAKoJ,GAAarN,EAAQiE,KAC1BF,UAAWsJ,GAAqBrN,EAAQ+D,WACxCD,UAAWuJ,GAAarN,EAAQ8D,WAChCI,QAASmJ,GAAarN,EAAQkE,UAEhC,CAAC,GAAC,IACN/L,OACAwD,YACAD,OAAQC,GACRiG,IAAMA,IACJ,GAAIA,EAAK,CACPmH,GAAS5Q,EAAM6H,GACfuB,EAAQvH,EAAI+P,EAAS5R,GAErB,MAAMmc,EAAWza,EAAY+H,EAAItK,QAC7BsK,EAAI2S,kBACD3S,EAAI2S,iBAAiB,yBAAyB,IAEjD3S,EACE4S,EAAkB5P,GAAkB0P,GACpC3S,EAAOJ,EAAMC,GAAGG,MAAQ,GAE9B,GACE6S,EACI7S,EAAKhE,MAAMoF,GAAgBA,IAAWuR,IACtCA,IAAa/S,EAAMC,GAAGI,IAE1B,OAGF/G,EAAIkP,EAAS5R,EAAM,CACjBqJ,IAAEpC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACGmC,EAAMC,IACLgT,EACA,CACE7S,KAAM,IACDA,EAAKhI,OAAOyS,IACfkI,KACI3c,MAAMC,QAAQoC,EAAIgD,EAAgB7E,IAAS,CAAC,CAAC,GAAK,IAExDyJ,IAAK,CAAExK,KAAMkd,EAASld,KAAMe,SAE9B,CAAEyJ,IAAK0S,MAIf5E,EAAoBvX,GAAM,OAAO4B,EAAWua,E,MAE5C/S,EAAQvH,EAAI+P,EAAS5R,EAAM,CAAC,GAExBoJ,EAAMC,KACRD,EAAMC,GAAG6C,OAAQ,IAGlBoF,EAASnB,kBAAoBtI,EAAQsI,qBAClCrQ,EAAmBuG,EAAOsK,MAAO3Q,KAASmR,EAAOlI,SACnD5C,EAAOyQ,QAAQrQ,IAAIzG,E,GAI7B,EAEMsc,GAAcA,IAClBhL,EAAS4E,kBACTnN,EAAsB6I,EAASgJ,GAAavU,EAAO6F,OAyB/CqQ,GACJA,CAACC,EAASC,IAAcnR,UACtB,IAAIoR,EACAC,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAGjB,IAAI9M,EAAchP,EAAY+Q,GAE9B,GAAIzL,EAAOP,SAASgX,KAClB,IAAK,MAAM9c,KAAQqG,EAAOP,SACxBpD,EAAIqN,EAAa/P,OAAM4B,GAQ3B,GAJAmP,EAAUK,MAAMnL,KAAK,CACnBwQ,cAAc,IAGZnF,EAASE,SAAU,CACrB,MAAM,OAAEzK,EAAM,OAAE4D,SAAiB8G,IACjCJ,EAAWtK,OAASA,EACpBgJ,EAAcpF,C,YAERyM,EAAyBxF,GAKjC,GAFArC,GAAM8B,EAAWtK,OAAQ,QAErB7B,EAAcmM,EAAWtK,QAAS,CACpCgK,EAAUK,MAAMnL,KAAK,CACnBc,OAAQ,CAAC,IAEX,UACQyV,EAAQzM,EAA6B4M,E,CAC3C,MAAOhT,GACP+S,EAAe/S,C,OAGb8S,SACIA,GAASxV,EAAAA,EAAAA,GAAC,CAAC,EAAIoK,EAAWtK,QAAU4V,GAE5CL,KACAxD,WAAWwD,IAUb,GAPAvL,EAAUK,MAAMnL,KAAK,CACnBsL,aAAa,EACbkF,cAAc,EACdC,mBAAoBxR,EAAcmM,EAAWtK,UAAY2V,EACzDrG,YAAahF,EAAWgF,YAAc,EACtCtP,OAAQsK,EAAWtK,SAEjB2V,EACF,MAAMA,C,EAuCNK,GAAqC,SACzCzW,GAEE,IADF0W,EAAgBrY,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEpB,MAAMsY,EAAgB3W,EAAavF,EAAYuF,GAAczB,EACvDqY,EAAqBnc,EAAYkc,GACjCE,EAAqBjY,EAAcoB,GACnCqE,EAASwS,EAAqBtY,EAAiBqY,EAMrD,GAJKF,EAAiBI,oBACpBvY,EAAiBoY,IAGdD,EAAiBK,WAAY,CAChC,GAAIL,EAAiBM,gBAAiB,CACpC,MAAMC,EAAgB,IAAInc,IAAI,IACzBiF,EAAO6F,SACPpH,OAAOK,KAAKqP,GAAe3P,EAAgBiN,MAEhD,IAAK,MAAMnL,KAAanH,MAAMgP,KAAK+O,GACjC1b,EAAIwP,EAAWuF,YAAajQ,GACxBjE,EAAIiI,EAAQhE,EAAW9E,EAAIiQ,EAAanL,IACxCuT,EACEvT,EACA9E,EAAI8I,EAAQhE,G,KAGf,CACL,GAAIhG,GAASe,EAAY4E,GACvB,IAAK,MAAMtG,KAAQqG,EAAO6F,MAAO,CAC/B,MAAM9C,EAAQvH,EAAI+P,EAAS5R,GAC3B,GAAIoJ,GAASA,EAAMC,GAAI,CACrB,MAAMkM,EAAiB/V,MAAMC,QAAQ2J,EAAMC,GAAGG,MAC1CJ,EAAMC,GAAGG,KAAK,GACdJ,EAAMC,GAAGI,IAEb,GAAIM,GAAcwL,GAAiB,CACjC,MAAMiI,EAAOjI,EAAekI,QAAQ,QACpC,GAAID,EAAM,CACRA,EAAKE,QACL,K,IAOV9L,EAAU,CAAC,C,CAGbE,EAAcR,EAASnB,iBACnB6M,EAAiBI,kBACfrc,EAAY8D,GACZ,CAAC,EACH9D,EAAY4J,GAEhBoG,EAAUJ,MAAM1K,KAAK,CACnB0E,QAAM1D,EAAAA,EAAAA,GAAA,GAAO0D,KAGfoG,EAAUpG,OAAO1E,KAAK,CACpB0E,QAAM1D,EAAAA,EAAAA,GAAA,GAAO0D,I,CAIjBtE,EAAS,CACP6F,MAAO8Q,EAAiBM,gBAAkBjX,EAAO6F,MAAQ,IAAI9K,IAC7D0V,QAAS,IAAI1V,IACbuP,MAAO,IAAIvP,IACX0E,SAAU,IAAI1E,IACdoF,MAAO,IAAIpF,IACXwF,UAAU,EACVoL,MAAO,IAGTb,EAAOjF,OACJjH,EAAgBuF,WACfwS,EAAiBlB,eACjBkB,EAAiBM,gBAErBnM,EAAO3K,QAAU8K,EAASnB,iBAE1BY,EAAUK,MAAMnL,KAAK,CACnBoQ,YAAa2G,EAAiBW,gBAC1BtM,EAAWgF,YACX,EACJC,SAAS6G,IAELH,EAAiBtB,UACfrK,EAAWiF,WAET0G,EAAiBI,mBAChB7J,GAAUjN,EAAYzB,KAE/B0M,cAAayL,EAAiBY,iBAC1BvM,EAAWE,YAEfqF,YAAauG,EACT,CAAC,EACDH,EAAiBM,gBACfN,EAAiBI,mBAAqBtL,EACpC0C,GAAe3P,EAAgBiN,GAC/BT,EAAWuF,YACboG,EAAiBI,mBAAqB9W,EACpCkO,GAAe3P,EAAgByB,GAC/B0W,EAAiBtB,UACfrK,EAAWuF,YACX,CAAC,EACXD,cAAeqG,EAAiBrB,YAC5BtK,EAAWsF,cACX,CAAC,EACL5P,OAAQiW,EAAiBa,WAAaxM,EAAWtK,OAAS,CAAC,EAC3D2P,qBAAoBsG,EAAiBc,wBACjCzM,EAAWqF,mBAEfD,cAAc,GAElB,EAEMiH,GAAoCA,CAACpX,EAAY0W,IACrDD,GACEjT,GAAWxD,GACNA,EAAwBwL,GACzBxL,EACJ0W,GAuCJ,MAAO,CACLxY,QAAS,CACPoM,YACAsB,cACA8I,iBACAuB,gBACArB,YACAzJ,iBACA+H,YACArB,YACAlG,eACA8L,iBAl5BqBA,KACvB,IAAK,MAAM/d,KAAQqG,EAAOyQ,QAAS,CACjC,MAAM1N,EAAevH,EAAI+P,EAAS5R,GAElCoJ,IACGA,EAAMC,GAAGG,KACNJ,EAAMC,GAAGG,KAAK0B,OAAOzB,IAASwK,GAAKxK,MAClCwK,GAAK7K,EAAMC,GAAGI,OACnByI,GAAWlS,E,CAGfqG,EAAOyQ,QAAU,IAAI1V,GAAK,EAw4BxB8P,kBA5sC6C,SAC/ClR,GAME,IALF2K,EAAMhG,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,GACTqZ,EAAMrZ,UAAA9B,OAAA,EAAA8B,UAAA,QAAA/C,EACNqc,EAAItZ,UAAA9B,OAAA,EAAA8B,UAAA,QAAA/C,EACJsc,IAAevZ,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,KAAAA,UAAA,GACfwZ,IAA0BxZ,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,KAAAA,UAAA,GAE1B,GAAIsZ,GAAQD,IAAW1M,EAASxL,SAAU,CAExC,GADAqL,EAAOlI,QAAS,EACZkV,GAA8B3e,MAAMC,QAAQoC,EAAI+P,EAAS5R,IAAQ,CACnE,MAAM+P,EAAciO,EAAOnc,EAAI+P,EAAS5R,GAAOie,EAAK7L,KAAM6L,EAAK5L,MAC/D6L,GAAmBxb,EAAIkP,EAAS5R,EAAM+P,E,CAGxC,GACEoO,GACA3e,MAAMC,QAAQoC,EAAIwP,EAAWtK,OAAQ/G,IACrC,CACA,MAAM+G,EAASiX,EACbnc,EAAIwP,EAAWtK,OAAQ/G,GACvBie,EAAK7L,KACL6L,EAAK5L,MAEP6L,GAAmBxb,EAAI2O,EAAWtK,OAAQ/G,EAAM+G,GAChDiP,GAAgB3E,EAAWtK,OAAQ/G,E,CAGrC,GACEiF,EAAgB0R,eAChBwH,GACA3e,MAAMC,QAAQoC,EAAIwP,EAAWsF,cAAe3W,IAC5C,CACA,MAAM2W,EAAgBqH,EACpBnc,EAAIwP,EAAWsF,cAAe3W,GAC9Bie,EAAK7L,KACL6L,EAAK5L,MAEP6L,GAAmBxb,EAAI2O,EAAWsF,cAAe3W,EAAM2W,E,CAGrD1R,EAAgB2R,cAClBvF,EAAWuF,YAAcpC,GAAe3P,EAAgBiN,IAG1Df,EAAUK,MAAMnL,KAAK,CACnBjG,OACAsW,QAAS6B,EAAUnY,EAAM2K,GACzBiM,YAAavF,EAAWuF,YACxB7P,OAAQsK,EAAWtK,OACnByD,QAAS6G,EAAW7G,S,MAGtB9H,EAAIoP,EAAa9R,EAAM2K,EAE3B,EAspCIoR,wBACAzL,eA52BFtQ,GAEAuB,EACEM,EACEsP,EAAOjF,MAAQ4F,EAAcjN,EAC7B7E,EACAsR,EAASnB,iBAAmBtO,EAAIgD,EAAgB7E,EAAM,IAAM,KAu2B9D+c,UACAqB,oBAzBwBA,IAC1BtU,GAAWwH,EAAS1M,gBACnB0M,EAAS1M,gBAA6B8M,MAAM/G,IAC3C+S,GAAM/S,EAAQ2G,EAAS+M,cACvBtN,EAAUK,MAAMnL,KAAK,CACnBsQ,WAAW,GACX,IAoBF+H,iBAlCFvF,IAEA1H,GAAUpK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACLoK,GACA0H,EACJ,EA8BCwF,aA1SkBzY,IAChB1D,EAAU0D,KACZiL,EAAUK,MAAMnL,KAAK,CAAEH,aACvBiD,EACE6I,GACA,CAACnI,EAAKzJ,KACJ,MAAMsJ,EAAsBzH,EAAI+P,EAAS5R,GACrCsJ,IACFG,EAAI3D,SAAWwD,EAAaD,GAAGvD,UAAYA,EAEvCtG,MAAMC,QAAQ6J,EAAaD,GAAGG,OAChCF,EAAaD,GAAGG,KAAK8N,SAASlL,IAC5BA,EAAStG,SAAWwD,EAAaD,GAAGvD,UAAYA,CAAQ,I,GAKhE,GACA,G,EAyRFiL,YACA9L,kBACAuZ,WArpCgBzX,IAClBsK,EAAWtK,OAASA,EACpBgK,EAAUK,MAAMnL,KAAK,CACnBc,OAAQsK,EAAWtK,OACnByD,SAAS,GACT,EAipCA,WAAIoH,GACF,OAAOA,C,EAET,eAAIE,GACF,OAAOA,C,EAET,UAAIX,GACF,OAAOA,C,EAET,UAAIA,CAAOhS,GACTgS,EAAShS,C,EAEX,kBAAI0F,GACF,OAAOA,C,EAET,UAAIwB,GACF,OAAOA,C,EAET,UAAIA,CAAOlH,GACTkH,EAASlH,C,EAEX,cAAIkS,GACF,OAAOA,C,EAET,cAAIA,CAAWlS,GACbkS,EAAalS,C,EAEf,YAAImS,GACF,OAAOA,C,EAET,YAAIA,CAASnS,GACXmS,GAAQrK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHqK,GACAnS,E,GAIT4a,WACAnJ,YACA2L,gBACA/V,MA5gBwCA,CACxCxG,EAIAgC,IAEA8H,GAAW9J,GACP+Q,EAAUpG,OAAO3E,UAAU,CACzBC,KAAOwY,GACLze,EACEwZ,OAAU5X,EAAWI,GACrByc,KAONjF,EACExZ,EACAgC,GACA,GAufNkY,WACAX,aACAmE,SACAgB,WAxQkD,SAAC1e,GAAsB,IAAhB6H,EAAOlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChE9C,EAAI+P,EAAS5R,KACX0B,EAAYmG,EAAQ7F,cACtBkY,EAASla,EAAMe,EAAYc,EAAIgD,EAAgB7E,MAE/Cka,EACEla,EACA6H,EAAQ7F,cAKVU,EAAImC,EAAgB7E,EAAMe,EAAY8G,EAAQ7F,gBAG3C6F,EAAQ8T,aACXpM,GAAM8B,EAAWsF,cAAe3W,GAG7B6H,EAAQ6T,YACXnM,GAAM8B,EAAWuF,YAAa5W,GAC9BqR,EAAWiF,QAAUzO,EAAQ7F,aACzBmW,EAAUnY,EAAMe,EAAYc,EAAIgD,EAAgB7E,KAChDmY,KAGDtQ,EAAQ4T,YACXlM,GAAM8B,EAAWtK,OAAQ/G,GACzBiF,EAAgBuF,SAAWyH,KAG7BlB,EAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,GAAC,CAAC,EAAIoK,IAE9B,EAwOEsN,YAljBqD3e,IACrDA,GACEyF,EAAsBzF,GAAMsX,SAASsH,GACnCrP,GAAM8B,EAAWtK,OAAQ6X,KAG7B7N,EAAUK,MAAMnL,KAAK,CACnBc,OAAQ/G,EAAOqR,EAAWtK,OAAS,CAAC,GACpC,EA2iBFmL,cACAgJ,YACA2D,SA1G8C,SAAC7e,GAAsB,IAAhB6H,EAAOlD,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChE,MAAMyE,EAAQvH,EAAI+P,EAAS5R,GACrBuV,EAAiBnM,GAASA,EAAMC,GAEtC,GAAIkM,EAAgB,CAClB,MAAM4G,EAAW5G,EAAe/L,KAC5B+L,EAAe/L,KAAK,GACpB+L,EAAe9L,IAEf0S,EAASnK,QACXmK,EAASnK,QACTnK,EAAQiX,cACNhV,GAAWqS,EAAS4C,SACpB5C,EAAS4C,S,CAGjB,EA2FE/D,iBAEJ,CCp6CgB,SAAAgE,KAKkC,IAAhD/a,EAAAU,UAAA9B,OAAA,QAAAjB,IAAA+C,UAAA,GAAAA,UAAA,GAA8C,CAAC,EAE/C,MAAMsa,EAAenb,EAAAA,YAEnBlC,GACIsd,EAAUpb,EAAAA,YAAkClC,IAC3C2C,EAAWe,GAAmBxB,EAAAA,SAAwC,CAC3EwS,SAAS,EACTE,cAAc,EACdD,UAAWzM,GAAW7F,EAAMW,eAC5B2M,aAAa,EACbkF,cAAc,EACdC,oBAAoB,EACpBlM,SAAS,EACT6L,YAAa,EACbO,YAAa,CAAC,EACdD,cAAe,CAAC,EAChBE,iBAAkB,CAAC,EACnB9P,OAAQ9C,EAAM8C,QAAU,CAAC,EACzBjB,SAAU7B,EAAM6B,WAAY,EAC5BlB,cAAekF,GAAW7F,EAAMW,oBAC5BhD,EACAqC,EAAMW,gBAGPqa,EAAarZ,UAChBqZ,EAAarZ,SAAOqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfkP,GAAkBlS,IAAM,IAC3BM,eAIJ,MAAMC,EAAUya,EAAarZ,QAAQpB,QA4ErC,OA3EAA,EAAQ8M,SAAWrN,EAEnByB,EAAa,CACXK,QAASvB,EAAQuM,UAAUK,MAC3BnL,KACE9G,IAGEiG,EACEjG,EACAqF,EAAQS,gBACRT,EAAQ8Z,kBACR,IAGFhZ,GAAe2B,EAAAA,EAAAA,GAAC,CAAC,EAAIzC,EAAQ6M,Y,IAKnCvN,EAAAA,WACE,IAAMU,EAAQ+Z,aAAata,EAAM6B,WACjC,CAACtB,EAASP,EAAM6B,WAGlBhC,EAAAA,WAAgB,KACd,GAAIU,EAAQS,gBAAgBqR,QAAS,CACnC,MAAMA,EAAU9R,EAAQ2T,YACpB7B,IAAY/R,EAAU+R,SACxB9R,EAAQuM,UAAUK,MAAMnL,KAAK,CAC3BqQ,W,IAIL,CAAC9R,EAASD,EAAU+R,UAEvBxS,EAAAA,WAAgB,KACVG,EAAM0G,SAAW4I,GAAUtP,EAAM0G,OAAQuU,EAAQtZ,UACnDpB,EAAQuY,OAAO9Y,EAAM0G,OAAQnG,EAAQ8M,SAAS+M,cAC9Ca,EAAQtZ,QAAU3B,EAAM0G,OACxBrF,GAAiB8L,IAAKnK,EAAAA,EAAAA,GAAA,GAAWmK,MAEjC5M,EAAQ4Z,qB,GAET,CAACna,EAAM0G,OAAQnG,IAElBV,EAAAA,WAAgB,KACVG,EAAM8C,QACRvC,EAAQga,WAAWva,EAAM8C,O,GAE1B,CAAC9C,EAAM8C,OAAQvC,IAElBV,EAAAA,WAAgB,KACTU,EAAQ2M,OAAOjF,QAClB1H,EAAQyN,eACRzN,EAAQ2M,OAAOjF,OAAQ,GAGrB1H,EAAQ2M,OAAO3K,QACjBhC,EAAQ2M,OAAO3K,OAAQ,EACvBhC,EAAQuM,UAAUK,MAAMnL,MAAIgB,EAAAA,EAAAA,GAAC,CAAC,EAAIzC,EAAQ6M,cAG5C7M,EAAQuZ,kBAAkB,IAG5Bja,EAAAA,WAAgB,KACdG,EAAMkM,kBACJ3L,EAAQuM,UAAUpG,OAAO1E,KAAK,CAC5B0E,OAAQnG,EAAQgV,aAChB,GACH,CAACvV,EAAMkM,iBAAkB3L,IAE5Bya,EAAarZ,QAAQrB,UAAYD,EAAkBC,EAAWC,GAEvDya,EAAarZ,OACtB,C","sources":["../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/generateId.ts","../node_modules/react-hook-form/src/logic/getFocusFieldName.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/append.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/insert.ts","../node_modules/react-hook-form/src/utils/move.ts","../node_modules/react-hook-form/src/utils/prepend.ts","../node_modules/react-hook-form/src/utils/remove.ts","../node_modules/react-hook-form/src/utils/swap.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/update.ts","../node_modules/react-hook-form/src/useFieldArray.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasPromiseValidation.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n  const isFileListInstance =\n    typeof FileList !== 'undefined' ? data instanceof FileList : false;\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || isFileListInstance)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(\n  object: T,\n  path?: string | null,\n  defaultValue?: unknown,\n): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldPath, FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (\n  object: FieldValues,\n  path: FieldPath<FieldValues>,\n  value?: unknown,\n) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TransformedValues extends FieldValues | undefined = undefined,\n>(): UseFormReturn<TFieldValues, TContext, TransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          return true;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          return true;\n        } else {\n          if (iterateFieldsByAction(currentField, action)) {\n            break;\n          }\n        }\n      } else if (isObject(currentField)) {\n        if (iterateFieldsByAction(currentField as FieldRefs, action)) {\n          break;\n        }\n      }\n    }\n  }\n  return;\n};\nexport default iterateFieldsByAction;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  InternalNameSet,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  disabledFieldNames: InternalNameSet,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabledFieldNames.has(name)) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n            ? inputValue > maxOutput.value\n            : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n            ? inputValue < minOutput.value\n            : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...data,\n  ...convertToArrayPayload(value),\n];\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...convertToArrayPayload(value),\n  ...convertToArrayPayload(data),\n];\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n      ? [path]\n      : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport getValidationModes from './logic/getValidationModes';\nimport isWatched from './logic/isWatched';\nimport iterateFieldsByAction from './logic/iterateFieldsByAction';\nimport updateFieldArrayRootError from './logic/updateFieldArrayRootError';\nimport validateField from './logic/validateField';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isEmptyObject from './utils/isEmptyObject';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport updateAt from './utils/update';\nimport { VALIDATION_MODE } from './constants';\nimport {\n  Control,\n  Field,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  RegisterOptions,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends\n    FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister,\n    rules,\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  rules &&\n    (control as Control<TFieldValues>).register(\n      name as FieldPath<TFieldValues>,\n      rules as RegisterOptions<TFieldValues>,\n    );\n\n  useSubscribe({\n    next: ({\n      values,\n      name: fieldArrayName,\n    }: {\n      values?: FieldValues;\n      name?: InternalFieldName;\n    }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        const fieldValues = get(values, _name.current);\n        if (Array.isArray(fieldValues)) {\n          setFields(fieldValues);\n          ids.current = fieldValues.map(generateId);\n        }\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    !Array.isArray(get(control._fields, name)) &&\n      set(control._fields, name, undefined);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: FieldArray<TFieldValues, TFieldArrayName>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._state.action = false;\n\n    isWatched(name, control._names) &&\n      control._subjects.state.next({\n        ...control._formState,\n      } as FormState<TFieldValues>);\n\n    if (\n      _actioned.current &&\n      (!getValidationModes(control._options.mode).isOnSubmit ||\n        control._formState.isSubmitted)\n    ) {\n      if (control._options.resolver) {\n        control._executeSchema([name]).then((result) => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (\n            existingError\n              ? (!error && existingError.type) ||\n                (error &&\n                  (existingError.type !== error.type ||\n                    existingError.message !== error.message))\n              : error && error.type\n          ) {\n            error\n              ? set(control._formState.errors, name, error)\n              : unset(control._formState.errors, name);\n            control._subjects.state.next({\n              errors: control._formState.errors as FieldErrors<TFieldValues>,\n            });\n          }\n        });\n      } else {\n        const field: Field = get(control._fields, name);\n        if (\n          field &&\n          field._f &&\n          !(\n            getValidationModes(control._options.reValidateMode).isOnSubmit &&\n            getValidationModes(control._options.mode).isOnSubmit\n          )\n        ) {\n          validateField(\n            field,\n            control._names.disabled,\n            control._formValues,\n            control._options.criteriaMode === VALIDATION_MODE.all,\n            control._options.shouldUseNativeValidation,\n            true,\n          ).then(\n            (error) =>\n              !isEmptyObject(error) &&\n              control._subjects.state.next({\n                errors: updateFieldArrayRootError(\n                  control._formState.errors as FieldErrors<TFieldValues>,\n                  error,\n                  name,\n                ) as FieldErrors<TFieldValues>,\n              }),\n          );\n        }\n      }\n    }\n\n    control._subjects.values.next({\n      name,\n      values: { ...control._formValues },\n    });\n\n    control._names.focus &&\n      iterateFieldsByAction(control._fields, (ref, key: string) => {\n        if (\n          control._names.focus &&\n          key.startsWith(control._names.focus) &&\n          ref.focus\n        ) {\n          ref.focus();\n          return 1;\n        }\n        return;\n      });\n\n    control._names.focus = '';\n\n    control._updateValid();\n\n    _actioned.current = false;\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n      ? value === ''\n        ? NaN\n        : value\n          ? +value\n          : value\n      : valueAsDate && isString(value)\n        ? new Date(value)\n        : setValueAs\n          ? setValueAs(value)\n          : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n      ? rule.source\n      : isObject(rule)\n        ? isRegex(rule.value)\n          ? rule.value.source\n          : rule.value\n        : rule;\n","import { Field, Validate } from '../types';\nimport isFunction from '../utils/isFunction';\nimport isObject from '../utils/isObject';\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\n\nexport default (fieldReference: Field['_f']) =>\n  !!fieldReference &&\n  !!fieldReference.validate &&\n  !!(\n    (isFunction(fieldReference.validate) &&\n      fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n    (isObject(fieldReference.validate) &&\n      Object.values(fieldReference.validate).find(\n        (validateFunction: Validate<unknown, unknown>) =>\n          validateFunction.constructor.name === ASYNC_FUNCTION,\n      ))\n  );\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasPromiseValidation from './hasPromiseValidation';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    disabled: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    values: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValidating || _proxyFormState.validatingFields)\n    ) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method && !_options.disabled) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!_options.disabled) {\n      const disabledField = !!(\n        get(_fields, name) &&\n        get(_fields, name)._f &&\n        get(_fields, name)._f.disabled\n      );\n      if (!isBlurEvent || shouldDirty) {\n        if (_proxyFormState.isDirty) {\n          isPreviousDirty = _formState.isDirty;\n          _formState.isDirty = output.isDirty = _getDirty();\n          shouldUpdateField = isPreviousDirty !== output.isDirty;\n        }\n\n        const isCurrentFieldPristine =\n          disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n\n        isPreviousDirty = !!(\n          !disabledField && get(_formState.dirtyFields, name)\n        );\n        isCurrentFieldPristine || disabledField\n          ? unset(_formState.dirtyFields, name)\n          : set(_formState.dirtyFields, name, true);\n        output.dirtyFields = _formState.dirtyFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.dirtyFields &&\n            isPreviousDirty !== !isCurrentFieldPristine);\n      }\n\n      if (isBlurEvent) {\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n        if (!isPreviousFieldTouched) {\n          set(_formState.touchedFields, name, isBlurEvent);\n          output.touchedFields = _formState.touchedFields;\n          shouldUpdateField =\n            shouldUpdateField ||\n            (_proxyFormState.touchedFields &&\n              isPreviousFieldTouched !== isBlurEvent);\n        }\n      }\n\n      shouldUpdateField && shouldRender && _subjects.state.next(output);\n    }\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (_options.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(_options.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field as Field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const isPromiseFunction =\n            field._f && hasPromiseValidation((field as Field)._f);\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name], true);\n          }\n\n          const fieldError = await validateField(\n            field as Field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name]);\n          }\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        !isEmptyObject(fieldValue) &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) =>\n    !_options.disabled &&\n    (name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n            ? _defaultValues\n            : isString(names)\n              ? { [names]: defaultValue }\n              : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        _options.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.values.next({\n              name,\n              values: { ..._formValues },\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        isObject(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: { ..._formValues },\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.values.next({\n      name: _state.mount ? name : undefined,\n      values: { ..._formValues },\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name = target.name as string;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n    const _updateIsFieldValueUpdated = (fieldValue: any): void => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n        deepEqual(fieldValue, get(_formValues, name, fieldValue));\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.values.next({\n          name,\n          type: event.type,\n          values: { ..._formValues },\n        });\n\n      if (shouldSkipValidation) {\n        if (_proxyFormState.isValid) {\n          if (_options.mode === 'onBlur' && isBlurEvent) {\n            _updateValid();\n          } else if (!isBlurEvent) {\n            _updateValid();\n          }\n        }\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (_proxyFormState.isValid) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n        ? get(values, fieldNames)\n        : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.values.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.values.next({\n      values: { ..._formValues },\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const _updateDisabledField: Control<TFieldValues>['_updateDisabledField'] = ({\n    disabled,\n    name,\n    field,\n    fields,\n  }) => {\n    if (\n      (isBoolean(disabled) && _state.mount) ||\n      !!disabled ||\n      _names.disabled.has(name)\n    ) {\n      disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n\n      updateTouchAndDirty(\n        name,\n        getFieldValue(field ? field._f : get(fields, name)._f),\n        false,\n        false,\n        true,\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined =\n      isBoolean(options.disabled) || isBoolean(_options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _updateDisabledField({\n        field,\n        disabled: isBoolean(options.disabled)\n          ? options.disabled\n          : _options.disabled,\n        name,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined\n        ? { disabled: options.disabled || _options.disabled }\n        : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n\n      let fieldValues = cloneObject(_formValues);\n\n      if (_names.disabled.size) {\n        for (const name of _names.disabled) {\n          set(fieldValues, name, undefined);\n        }\n      }\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TFieldValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as PathValue<\n            TFieldValues,\n            FieldPath<TFieldValues>\n          >,\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        const fieldsToCheck = new Set([\n          ..._names.mount,\n          ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n        ]);\n        for (const fieldName of Array.from(fieldsToCheck)) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = _options.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneObject(values);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.values.next({\n        values: { ...values },\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      disabled: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!_options.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? {}\n        : keepStateOptions.keepDirtyValues\n          ? keepStateOptions.keepDefaultValues && _formValues\n            ? getDirtyFields(_defaultValues, _formValues)\n            : _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n            ? getDirtyFields(_defaultValues, formValues)\n            : keepStateOptions.keepDirty\n              ? _formState.dirtyFields\n              : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? (formValues as Function)(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect &&\n          isFunction(fieldRef.select) &&\n          fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    (_options.defaultValues as Function)().then((values: TFieldValues) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _updateDisabledField,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _updateFormState,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      _setErrors,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >(undefined);\n  const _values = React.useRef<typeof props.values>(undefined);\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n    }\n  }, [props.errors, control]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._updateValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.values.next({\n        values: control._getWatch(),\n      });\n  }, [props.shouldUnregister, control]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","props","children","_objectWithoutProperties","_excluded","Provider","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","_excluded2","find","convertToArrayPayload","useSubscribe","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","message","_objectSpread","types","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","concat","focusIndex","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","_excluded4","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","appendAt","fillEmptyArray","insert","moveArrayAt","from","to","splice","prependAt","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","updateAt","fieldValues","useFieldArray","methods","keyName","shouldUnregister","rules","setFields","_getFieldArray","ids","_fieldIds","_name","_actioned","array","register","_ref","fieldArrayName","_subjects","updateValues","updatedFieldArrayValues","_updateFieldArray","_state","state","_formState","_options","isSubmitted","resolver","_executeSchema","then","existingError","_fields","reValidateMode","_formValues","criteriaMode","focus","_updateValid","unregister","swap","argA","argB","move","prepend","prependValue","append","appendValue","remove","insertValue","update","updateValue","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","_ref2","setValueAs","NaN","getFieldValue","files","selectedOptions","_ref3","getResolverOptions","getRuleValue","rule","source","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","executeBuiltInValidation","_updateIsValidating","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","_excluded5","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","_getWatch","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","_excluded6","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","_ref4","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","method","args","shouldSetValues","shouldUpdateFieldsAndState","_resetDefaultValues","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","useForm","_formControl","_values"],"sourceRoot":""}