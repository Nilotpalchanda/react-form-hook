{"version":3,"file":"static/js/115.347b363a.chunk.js","mappings":"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","sources":["Components/Signup/Signup.js"],"sourcesContent":["import React from 'react';\r\nimport './Signup.css';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { z } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nconst schema = z\r\n    .object({\r\n        fullName: z.string().nonempty('Full Name is required'),\r\n        emailId: z\r\n            .string()\r\n            .email('Invalid Email')\r\n            .nonempty('Email is required')\r\n            .regex(/^[a-z0-9][\\w\\.]+\\@\\w+?(\\.\\w+){1,}$/, 'Invalid Email'),\r\n        phoneNumber: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(10, 'Value should be more than 10 digits')\r\n            .nonempty('Phone Number is required'),\r\n        password: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required'),\r\n        confirmPassword: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required')\r\n    })\r\n    .refine((data) => data.password === data.confirmPassword, {\r\n        message: \"Passwords don't match\",\r\n        path: ['confirmPassword']\r\n    });\r\n    \r\nconst Signup = () => {\r\n    const [formData, setFormData] = React.useState({});\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'React Forms Hook Signup';\r\n        if (location.pathname === '/dashboard/5') {\r\n            document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n            document.getElementsByTagName('body')[0].style.paddingTop = '40px';\r\n        } else {\r\n            document.getElementsByTagName('body')[0].style.display = 'flex';\r\n        }\r\n    }, []);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors, isSubmitting }\r\n    } = useForm({\r\n        resolver: zodResolver(schema)\r\n    });\r\n\r\n    async function onSubmitHandler(data) {\r\n        await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n        if (location.pathname === '/dashboard/5') {\r\n            setFormData(data);\r\n            return;\r\n        }\r\n        navigate('/');\r\n        localStorage.setItem('loginDetails', JSON.stringify({ data }));\r\n    }\r\n    return (\r\n        <>\r\n            <main className=\"form-signin text-center bg-body rounded shadow-lg\">\r\n                <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n                    <h1 className=\"h3 mb-3 fw-normal\">Sign up</h1>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                                errors.fullName ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"fullName\"\r\n                            placeholder=\"Full Name\"\r\n                            {...register('fullName')}\r\n                        />\r\n                        {errors.fullName && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.fullName.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Full name</label>\r\n                    </div>\r\n\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"email\"\r\n                            className={`form-control ${\r\n                                errors.emailId ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"emailId\"\r\n                            placeholder=\"name@example.com\"\r\n                            {...register('emailId')}\r\n                        />\r\n                        {errors.emailId && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.emailId.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Email address</label>\r\n                    </div>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                                errors.phoneNumber ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"phoneNumber\"\r\n                            placeholder=\"Phone Number\"\r\n                            {...register('phoneNumber')}\r\n                        />\r\n                        {errors.phoneNumber && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.phoneNumber.message}\r\n                            </div>\r\n                        )}\r\n\r\n                        <label htmlFor=\"floatingInput\">Phone Number</label>\r\n                    </div>\r\n\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control m-0 ${\r\n                                errors.password ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register('password')}\r\n                        />\r\n                        {errors.password && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.password.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingPassword\">Password</label>\r\n                    </div>\r\n                    <div className=\"form-floating\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control m-0 ${\r\n                                errors.confirmPassword ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"confirmPassword\"\r\n                            placeholder=\"Confirm Password\"\r\n                            {...register('confirmPassword')}\r\n                        />\r\n                        {errors.confirmPassword && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.confirmPassword.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingPassword\">\r\n                            Confirm Password\r\n                        </label>\r\n                    </div>\r\n                    <button\r\n                        className={`w-100 btn btn-lg btn-primary sign-up-button mt-2`}\r\n                        type=\"submit\"\r\n                    >\r\n                        {isSubmitting ? 'Loading....' : 'Sign Up'}\r\n                    </button>\r\n                </form>\r\n            </main>\r\n            {Object.keys(formData)?.length > 0 && !isSubmitting && (\r\n                <div\r\n                    className=\"form-signin container bg-body rounded shadow-lg mt-4 pt-4 pb-4\"\r\n                    style={{ marginBottom: '5rem' }}\r\n                >\r\n                    <h1>Form Data</h1>\r\n                    <pre>{JSON.stringify(formData, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["schema","z","object","fullName","string","nonempty","emailId","email","regex","phoneNumber","min","password","confirmPassword","refine","data","message","path","Signup","_Object$keys","formData","setFormData","React","navigate","useNavigate","location","useLocation","document","title","pathname","getElementsByTagName","style","display","paddingTop","register","handleSubmit","formState","errors","isSubmitting","useForm","resolver","zodResolver","_jsxs","_Fragment","children","_jsx","className","onSubmit","async","Promise","r","setTimeout","localStorage","setItem","JSON","stringify","_objectSpread","type","concat","id","placeholder","class","htmlFor","Object","keys","length","marginBottom"],"sourceRoot":""}