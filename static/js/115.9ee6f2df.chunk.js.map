{"version":3,"file":"static/js/115.9ee6f2df.chunk.js","mappings":"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","sources":["Components/Signup/Signup.js"],"sourcesContent":["import React from 'react';\r\nimport './Signup.css';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { z } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nconst schema = z.object({\r\n    fullName: z.string().nonempty('Full Name is required'),\r\n    emailId: z\r\n        .string()\r\n        .email('Invalid Email')\r\n        .nonempty('Email is required')\r\n        .regex(/^[a-z0-9][\\w\\.]+\\@\\w+?(\\.\\w+){1,}$/, 'Invalid Email'),\r\n    phoneNumber: z\r\n        .string()\r\n        .regex(/^[0-9]+$/, 'Must be only digits')\r\n        .min(10, 'Value should be more than 10 digits')\r\n        .nonempty('Phone Number is required'),\r\n    password: z\r\n        .string()\r\n        .regex(/^[0-9]+$/, 'Must be only digits')\r\n        .min(5, 'Value should be more than 5 digits')\r\n        .nonempty('Password is required')\r\n});\r\nconst Signup = () => {\r\n    const [formData, setFormData] = React.useState({});\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'React Forms Hook Signup';\r\n        document.getElementsByTagName('body')[0].style.display = 'flex';\r\n    }, []);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n    } = useForm({\r\n        resolver: zodResolver(schema)\r\n    });\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    function onSubmitHandler(data) {\r\n        if (location.pathname === '/dashboard/4') {\r\n            setFormData(data);\r\n            return;\r\n        }\r\n        navigate('/');\r\n        localStorage.setItem('loginDetails', JSON.stringify({ data }));\r\n    }\r\n    return (\r\n        <>\r\n            <main className=\"form-signin text-center bg-body rounded shadow-lg\">\r\n                <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n                    <h1 className=\"h3 mb-3 fw-normal\">Sign up</h1>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                                errors.fullName ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"fullName\"\r\n                            placeholder=\"Full Name\"\r\n                            {...register('fullName')}\r\n                        />\r\n                        {errors.fullName && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.fullName.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Full name</label>\r\n                    </div>\r\n\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"email\"\r\n                            className={`form-control ${\r\n                                errors.emailId ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"emailId\"\r\n                            placeholder=\"name@example.com\"\r\n                            {...register('emailId')}\r\n                        />\r\n                        {errors.emailId && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.emailId.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Email address</label>\r\n                    </div>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                                errors.phoneNumber ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"phoneNumber\"\r\n                            placeholder=\"Phone Number\"\r\n                            {...register('phoneNumber')}\r\n                        />\r\n                        {errors.phoneNumber && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.phoneNumber.message}\r\n                            </div>\r\n                        )}\r\n\r\n                        <label htmlFor=\"floatingInput\">Phone Number</label>\r\n                    </div>\r\n\r\n                    <div className=\"form-floating\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control m-0 ${\r\n                                errors.password ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register('password')}\r\n                        />\r\n                        {errors.password && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.password.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingPassword\">Password</label>\r\n                    </div>\r\n                    <button\r\n                        className={`w-100 btn btn-lg btn-primary sign-up-button mt-2`}\r\n                        type=\"submit\"\r\n                    >\r\n                        Sign up\r\n                    </button>\r\n                </form>\r\n            </main>\r\n            {Object.keys(formData)?.length > 0 && (\r\n                <div className=\"form-signin container bg-body rounded shadow-lg mt-4 pt-4 pb-4\">\r\n                    <h1>Form Data</h1>\r\n                    <pre>{JSON.stringify(formData, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["schema","z","object","fullName","string","nonempty","emailId","email","regex","phoneNumber","min","password","Signup","_Object$keys","formData","setFormData","React","document","title","getElementsByTagName","style","display","register","handleSubmit","formState","errors","useForm","resolver","zodResolver","navigate","useNavigate","location","useLocation","_jsxs","_Fragment","children","_jsx","className","onSubmit","data","pathname","localStorage","setItem","JSON","stringify","_objectSpread","type","concat","id","placeholder","class","message","htmlFor","Object","keys","length"],"sourceRoot":""}