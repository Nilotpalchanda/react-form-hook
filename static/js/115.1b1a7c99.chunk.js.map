{"version":3,"file":"static/js/115.1b1a7c99.chunk.js","mappings":"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","sources":["Components/Signup/Signup.js","ValidationSchema/ValidationSchema.js","../node_modules/@hookform/resolvers/zod/src/zod.ts"],"sourcesContent":["import React from 'react';\r\nimport './Signup.css';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { SignUpSchema } from '../../ValidationSchema/ValidationSchema';\r\n\r\nconst Signup = () => {\r\n    const [formData, setFormData] = React.useState({});\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'React Forms Hook Signup';\r\n        if (location.pathname === '/dashboard/5') {\r\n            document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n            document.getElementsByTagName('body')[0].style.paddingTop = '40px';\r\n        } else {\r\n            document.getElementsByTagName('body')[0].style.display = 'flex';\r\n        }\r\n    }, []);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors, isSubmitting }\r\n    } = useForm({\r\n        resolver: zodResolver(SignUpSchema)\r\n    });\r\n\r\n    async function onSubmitHandler(data) {\r\n        await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n        if (location.pathname === '/dashboard/5') {\r\n            setFormData(data);\r\n            return;\r\n        }\r\n        navigate('/');\r\n        localStorage.setItem('loginDetails', JSON.stringify({ data }));\r\n    }\r\n    return (\r\n        <>\r\n            <main className=\"form-signin text-center bg-body rounded shadow-lg\">\r\n                <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n                    <h1 className=\"h3 mb-3 fw-normal\">Sign up</h1>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                                errors.fullName ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"fullName\"\r\n                            placeholder=\"Full Name\"\r\n                            {...register('fullName')}\r\n                        />\r\n                        {errors.fullName && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.fullName.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Full name</label>\r\n                    </div>\r\n\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"email\"\r\n                            className={`form-control ${\r\n                                errors.emailId ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"emailId\"\r\n                            placeholder=\"name@example.com\"\r\n                            {...register('emailId')}\r\n                        />\r\n                        {errors.emailId && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.emailId.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Email address</label>\r\n                    </div>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${\r\n                                errors.phoneNumber ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"phoneNumber\"\r\n                            placeholder=\"Phone Number\"\r\n                            {...register('phoneNumber')}\r\n                        />\r\n                        {errors.phoneNumber && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.phoneNumber.message}\r\n                            </div>\r\n                        )}\r\n\r\n                        <label htmlFor=\"floatingInput\">Phone Number</label>\r\n                    </div>\r\n\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control m-0 ${\r\n                                errors.password ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register('password')}\r\n                        />\r\n                        {errors.password && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.password.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingPassword\">Password</label>\r\n                    </div>\r\n                    <div className=\"form-floating\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control m-0 ${\r\n                                errors.confirmPassword ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"confirmPassword\"\r\n                            placeholder=\"Confirm Password\"\r\n                            {...register('confirmPassword')}\r\n                        />\r\n                        {errors.confirmPassword && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.confirmPassword.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingPassword\">\r\n                            Confirm Password\r\n                        </label>\r\n                    </div>\r\n                    <button\r\n                        className={`w-100 btn btn-lg btn-primary sign-up-button mt-2`}\r\n                        type=\"submit\"\r\n                    >\r\n                        {isSubmitting ? 'Loading....' : 'Sign Up'}\r\n                    </button>\r\n                </form>\r\n            </main>\r\n            {Object.keys(formData)?.length > 0 && !isSubmitting && (\r\n                <div\r\n                    className=\"form-signin container bg-body rounded shadow-lg mt-4 pt-4 pb-4\"\r\n                    style={{ marginBottom: '5rem' }}\r\n                >\r\n                    <h1>Form Data</h1>\r\n                    <pre>{JSON.stringify(formData, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","import * as yup from 'yup';\r\nimport { z } from 'zod';\r\n\r\nexport const LoginSchema = yup.object().shape({\r\n    emailId: yup.string().email().required('Email is required'),\r\n    password: yup\r\n        .string()\r\n        .required('Password is required')\r\n        .matches(/^[0-9]+$/, 'Must be only digits')\r\n        .min(5, 'Value should be more than 5 digits')\r\n});\r\n\r\nexport const SignUpSchema = z\r\n    .object({\r\n        fullName: z.string().nonempty('Full Name is required'),\r\n        emailId: z\r\n            .string()\r\n            .email('Invalid Email')\r\n            .nonempty('Email is required')\r\n            .regex(/^[a-z0-9][\\w\\.]+\\@\\w+?(\\.\\w+){1,}$/, 'Invalid Email'),\r\n        phoneNumber: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(10, 'Value should be more than 10 digits')\r\n            .nonempty('Phone Number is required'),\r\n        password: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required'),\r\n        confirmPassword: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required')\r\n    })\r\n    .refine((data) => data.password === data.confirmPassword, {\r\n        message: \"Passwords don't match\",\r\n        path: ['confirmPassword']\r\n    });\r\n\r\nexport const HealthFormSchema = yup.object().shape({\r\n    firstName: yup.string().required('First name is required'),\r\n    lastName: yup.string().required('Last name is required'),\r\n    dob: yup.date().required('Date of Birth is required'),\r\n    email: yup\r\n        .string()\r\n        .email('Invalid email address')\r\n        .required('Email address is required'),\r\n    insurancePlan: yup.string().required('Insurance plan is required'),\r\n    mailingAddress: yup.array().of(\r\n        yup.object().shape({\r\n            streetAddress: yup.string().required('Street Address is required'),\r\n            city: yup.string().required('City is required'),\r\n            region: yup.string().required('Region is required'),\r\n            postalCode: yup.string().required('Postal Code is required')\r\n        })\r\n    )\r\n});\r\n\r\nexport const TabFormSchema = z.object({\r\n    // Tab 1 schema\r\n    firstName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid First name')\r\n        .nonempty('First Name is required'),\r\n    lastName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid Last name')\r\n        .nonempty('Last Name is required'),\r\n    // Tab 2 schema\r\n    email: z.string().email('Invalid Email').nonempty('Email is required'),\r\n    phone: z.string().regex(/^\\d{10}$/, 'Phone number must be 10 digits'),\r\n    // Tab 3 schema\r\n    address: z\r\n        .string()\r\n        .min(5, 'Please enter a valid address')\r\n        .nonempty('Address is required'),\r\n    city: z\r\n        .string()\r\n        .min(4, 'Please enter a valid city')\r\n        .nonempty('City is required')\r\n});\r\n","import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport { FieldError, FieldErrors, appendErrors } from 'react-hook-form';\nimport { ZodError, z } from 'zod';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError =>\n  Array.isArray(error?.errors);\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"names":["Signup","_Object$keys","formData","setFormData","React","navigate","useNavigate","location","useLocation","document","title","pathname","getElementsByTagName","style","display","paddingTop","register","handleSubmit","formState","errors","isSubmitting","useForm","resolver","zodResolver","SignUpSchema","_jsxs","_Fragment","children","_jsx","className","onSubmit","async","data","Promise","r","setTimeout","localStorage","setItem","JSON","stringify","_objectSpread","type","concat","fullName","id","placeholder","class","message","htmlFor","emailId","phoneNumber","password","confirmPassword","Object","keys","length","marginBottom","LoginSchema","yup","shape","email","required","matches","min","z","object","string","nonempty","regex","refine","path","HealthFormSchema","firstName","lastName","dob","insurancePlan","mailingAddress","of","streetAddress","city","region","postalCode","TabFormSchema","phone","address","n","e","t","s","code","i","a","join","u","unionErrors","forEach","push","c","types","f","o","shift","resolve","mode","then","shouldUseNativeValidation","values","raw","Array","isArray","criteriaMode","reject"],"sourceRoot":""}