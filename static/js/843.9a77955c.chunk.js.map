{"version":3,"file":"static/js/843.9a77955c.chunk.js","mappings":"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","sources":["Components/DashBoard/FormManagement/DynamicForm/DynamicFormData.js","Components/DashBoard/FormManagement/DynamicForm/DynamicForm.js"],"sourcesContent":["const dynamicFormData = [\r\n    {\r\n        sectionTitle: 'User Information',\r\n        fields: [\r\n            {\r\n                name: 'fullName',\r\n                label: 'Full Name',\r\n                type: 'text',\r\n                required: true,\r\n                placeholder: 'Enter full name'\r\n            },\r\n            {\r\n                name: 'email',\r\n                label: 'Email Address',\r\n                type: 'email',\r\n                required: true,\r\n                placeholder: 'Enter email'\r\n            },\r\n            {\r\n                name: 'password',\r\n                label: 'Password',\r\n                type: 'password',\r\n                required: true,\r\n                placeholder: 'Enter password',\r\n                length: 5,\r\n                numberOnly: /^[0-9]+$/\r\n            },\r\n            {\r\n                name: 'birthday',\r\n                label: 'Date of Birth',\r\n                type: 'date',\r\n                required: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        sectionTitle: 'Preferences',\r\n        fields: [\r\n            {\r\n                name: 'colorPreference',\r\n                label: 'Favorite Color',\r\n                type: 'color',\r\n                required: false\r\n            },\r\n            {\r\n                name: 'experienceLevel',\r\n                label: 'Experience Level',\r\n                type: 'range',\r\n                min: 0,\r\n                max: 10,\r\n                step: 1,\r\n                required: false\r\n            },\r\n            {\r\n                name: 'developmentSkills',\r\n                label: 'Development Skills',\r\n                type: 'select',\r\n                options: [\r\n                    { label: 'Select your skills', value: '' },\r\n                    { label: 'Frontend', value: 'frontend' },\r\n                    { label: 'Backend', value: 'backend' },\r\n                    { label: 'Full Stack', value: 'fullstack' },\r\n                    { label: 'Data Science', value: 'datascience' }\r\n                ],\r\n                required: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        sectionTitle: 'Feedback',\r\n        fields: [\r\n            {\r\n                name: 'websiteFeedback',\r\n                label: 'Your Feedback',\r\n                type: 'textarea',\r\n                required: true,\r\n                placeholder: 'Share your thoughts',\r\n                textLength: 10\r\n            },\r\n            {\r\n                name: 'fileUpload',\r\n                label: 'Upload File',\r\n                type: 'file',\r\n                required: false\r\n            },\r\n            {\r\n                name: 'termsAgreement',\r\n                label: 'Agree to Terms',\r\n                type: 'checkbox',\r\n                required: true\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport async function getDynamicFormData() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(dynamicFormData);\r\n        }, 1000);\r\n    });\r\n}\r\n\r\nexport const formInputFields = [\r\n    'text',\r\n    'email',\r\n    'password',\r\n    'number',\r\n    'color',\r\n    'range',\r\n    'file',\r\n    'search'\r\n];\r\n","import React, { useEffect } from 'react';\r\nimport './DynamicForm.css';\r\nimport { getDynamicFormData, formInputFields } from './DynamicFormData';\r\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\r\nimport { useLoadingBar } from 'react-top-loading-bar';\r\n\r\nconst DynamicForm = () => {\r\n    const [dynamicData, setDynamicData] = React.useState([]);\r\n    const [formState, setFormState] = React.useState({});\r\n    const [loadingCompleted, setIsLoadingCompleted] = React.useState(false);\r\n    const { start, complete } = useLoadingBar({\r\n        color: '#1cdbbcd9',\r\n        height: 6,\r\n        onLoaderFinished: function () {\r\n            setIsLoadingCompleted(true);\r\n        }\r\n    });\r\n    useEffect(() => {\r\n        start();\r\n        document.title = 'Dynamic Form with JSON Data';\r\n        document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n        getDynamicFormData().then((res) => {\r\n            complete();\r\n            setDynamicData(res);\r\n        });\r\n    }, []);\r\n\r\n    const methods = useForm();\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            start();\r\n            await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n            complete();\r\n            setFormState(data);\r\n        } catch (e) {\r\n            console.error('Dynamic form onsubmit error:::', e);\r\n        }\r\n    };\r\n\r\n    const getFiledBasedOnType = (field) => {\r\n        if (formInputFields.includes(field.type)) {\r\n            return <InputField field={field} />;\r\n        } else if (field.type === 'select') {\r\n            return <SelectField field={field} />;\r\n        } else if (field.type === 'textarea') {\r\n            return <TextAreaField field={field} />;\r\n        } else if (field.type === 'checkbox') {\r\n            return <CheckboxField field={field} />;\r\n        } else {\r\n            return <InputField field={field} />;\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div\r\n                className={`container bg-body rounded shadow-lg mt-4 pt-4 pb-4 ${\r\n                    Object.keys(formState)?.length > 0 &&\r\n                    !methods.formState.isSubmitting\r\n                        ? 'dynamic-form-div-with-result'\r\n                        : 'dynamic-form-div'\r\n                }`}\r\n            >\r\n                <div className=\"container\">\r\n                    <FormProvider {...methods}>\r\n                        <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n                            {dynamicData.map((section, index) => {\r\n                                return (\r\n                                    <>\r\n                                        <h3>{section.sectionTitle}</h3>\r\n                                        <div className=\"row\" key={index}>\r\n                                            {section.fields.map(\r\n                                                (field, sectionIndex) => {\r\n                                                    return (\r\n                                                        <div\r\n                                                            className=\"col-md-6 col-sm-12 mb-3\"\r\n                                                            key={sectionIndex}\r\n                                                        >\r\n                                                            <label>\r\n                                                                {field.label}\r\n                                                            </label>\r\n                                                            {getFiledBasedOnType(\r\n                                                                field\r\n                                                            )}\r\n                                                        </div>\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </div>\r\n                                    </>\r\n                                );\r\n                            })}\r\n                            <button\r\n                                className=\"btn btn-primary sumbit-dynamic-button\"\r\n                                type=\"submit\"\r\n                            >\r\n                                {methods.formState.isSubmitting\r\n                                    ? 'Submitting....'\r\n                                    : 'Submit'}\r\n                            </button>\r\n                        </form>\r\n                    </FormProvider>\r\n                </div>\r\n            </div>\r\n            {Object.keys(formState)?.length > 0 &&\r\n                !methods.formState.isSubmitting && (\r\n                    <div className=\"container bg-body rounded shadow-lg mt-4 pt-4 pb-4 dynamic-form-data\">\r\n                        <h1>Dynamic Form Data</h1>\r\n                        <pre>{JSON.stringify(formState, null, 2)}</pre>\r\n                    </div>\r\n                )}\r\n        </>\r\n    );\r\n};\r\nfunction InputField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext();\r\n    return (\r\n        <>\r\n            <input\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    },\r\n                    pattern:\r\n                        field.name === 'password'\r\n                            ? {\r\n                                  value: field.numberOnly,\r\n                                  message: `${field.label} is number only`\r\n                              }\r\n                            : null\r\n                })}\r\n                type={field.type}\r\n                placeholder={field.placeholder}\r\n                className=\"form-control\"\r\n            />\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nfunction SelectField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext();\r\n    return (\r\n        <>\r\n            <select\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    }\r\n                })}\r\n                className=\"form-control\"\r\n            >\r\n                {field.options.map((option, index) => (\r\n                    <option key={index} value={option.value}>\r\n                        {option.label}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nfunction TextAreaField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext();\r\n    return (\r\n        <>\r\n            <textarea\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    },\r\n                    minLength: {\r\n                        value: 10,\r\n                        message: `${field.label} required more than 10 charectors`\r\n                    }\r\n                })}\r\n                placeholder={field.placeholder}\r\n                className=\"form-control\"\r\n            />\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nfunction CheckboxField({ field }) {\r\n    const {\r\n        register,\r\n        formState: { errors }\r\n    } = useFormContext();\r\n    return (\r\n        <div className=\"custom-control custom-checkbox\">\r\n            <input\r\n                {...register(field.name, {\r\n                    required: {\r\n                        value: field.required,\r\n                        message: `${field.label} is required`\r\n                    }\r\n                })}\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"customCheck1\"\r\n            />\r\n            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                {field.label}\r\n            </label>\r\n            {errors[field.name] && (\r\n                <div className=\"invalid-feedback\">\r\n                    {errors[field.name].message}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DynamicForm;\r\n"],"names":["dynamicFormData","sectionTitle","fields","name","label","type","required","placeholder","length","numberOnly","min","max","step","options","value","textLength","formInputFields","InputField","_ref","field","register","formState","errors","useFormContext","_jsxs","_Fragment","children","_jsx","_objectSpread","message","concat","pattern","className","SelectField","_ref2","map","option","index","TextAreaField","_ref3","minLength","CheckboxField","_ref4","id","htmlFor","DynamicForm","_Object$keys","_Object$keys2","dynamicData","setDynamicData","React","setFormState","loadingCompleted","setIsLoadingCompleted","start","complete","useLoadingBar","color","height","onLoaderFinished","useEffect","document","title","getElementsByTagName","style","display","async","Promise","resolve","setTimeout","getDynamicFormData","then","res","methods","useForm","getFiledBasedOnType","includes","Object","keys","isSubmitting","FormProvider","onSubmit","handleSubmit","r","data","e","console","error","section","sectionIndex","JSON","stringify"],"sourceRoot":""}