{"version":3,"file":"static/js/886.2ae97a89.chunk.js","mappings":"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","sources":["Components/Login/Login.js","ValidationSchema/ValidationSchema.js","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import React from 'react';\r\nimport './Login.css';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { LoginSchema } from '../../ValidationSchema/ValidationSchema';\r\n\r\nconst Login = () => {\r\n    const [loginData, setLoginData] = React.useState({});\r\n    const [formData, setFormData] = React.useState({});\r\n    const [hasAccount, setHasAccount]= React.useState(true)\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const intoDashboardLoginForm = location.pathname === '/dashboard/4';\r\n    React.useEffect(() => {\r\n        document.title = 'React Forms Hook Login';\r\n        if (intoDashboardLoginForm) {\r\n            document.getElementsByTagName('body')[0].style.display = 'inherit';\r\n            document.getElementsByTagName('body')[0].style.paddingTop = '40px';\r\n        } else {\r\n            document.getElementsByTagName('body')[0].style.display = 'flex';\r\n        }\r\n        let localStorageData = localStorage.getItem('loginDetails');\r\n        setLoginData(JSON.parse(localStorageData));\r\n    }, []);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors, isSubmitting }\r\n    } = useForm({\r\n        resolver: yupResolver(LoginSchema)\r\n    });\r\n\r\n    async function onSubmitLoginHandler(data) {\r\n        if (intoDashboardLoginForm) {\r\n            setFormData(data);\r\n            return;\r\n        }\r\n        if (loginData) {\r\n            if (\r\n                data.emailId === loginData.data.emailId &&\r\n                data.password === loginData.data.password\r\n            ) {\r\n                await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n                navigate('/dashboard', {\r\n                    state: {\r\n                        userName: loginData.data.fullName,\r\n                        emailId: loginData.data.emailId\r\n                    }\r\n                });\r\n            }else {\r\n                setHasAccount(false)\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <main className=\"form-signin text-center bg-body rounded shadow-lg\">\r\n                <form onSubmit={handleSubmit(onSubmitLoginHandler)}>\r\n                    <h1 className=\"h3 mb-3 fw-normal\">Login</h1>\r\n\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"email\"\r\n                            className={`form-control ${\r\n                                errors.emailId ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"emailId\"\r\n                            placeholder=\"name@example.com\"\r\n                            {...register('emailId')}\r\n                        />\r\n                        {errors.emailId && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.emailId.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingInput\">Email address</label>\r\n                    </div>\r\n                    <div className=\"form-floating mb-2\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control m-0 ${\r\n                                errors.password ? 'is-invalid' : ''\r\n                            }`}\r\n                            id=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register('password')}\r\n                        />\r\n                        {errors.password && (\r\n                            <div class=\"invalid-feedback\">\r\n                                {errors.password.message}\r\n                            </div>\r\n                        )}\r\n                        <label htmlFor=\"floatingPassword\">Password</label>\r\n                    </div>\r\n\r\n                    <button\r\n                        className={`w-100 btn btn-lg  login-button `}\r\n                        type=\"submit\"\r\n                    >\r\n                        {isSubmitting ? 'Loading....' : 'Sign in'}\r\n                    </button>\r\n                    {!hasAccount && (\r\n                        <p className=\"has-account\">\r\n                            You Dont have account with us. Please&nbsp;<Link to={'/signup'}>Sign Up</Link>\r\n                        </p>\r\n                    )}\r\n                    {!intoDashboardLoginForm && hasAccount && (\r\n                        <p className=\"has-account\">\r\n                            Don't have an account?&nbsp;\r\n                            <Link to={'/signup'}>Sign Up</Link>\r\n                        </p>\r\n                    )}\r\n                </form>\r\n            </main>\r\n            {Object.keys(formData)?.length > 0 && !isSubmitting && (\r\n                <div className=\"form-signin container bg-body rounded shadow-lg mt-4 pt-4 pb-4 \">\r\n                    <h1>Form Data</h1>\r\n                    <pre>{JSON.stringify(formData, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import * as yup from 'yup';\r\nimport { z } from 'zod';\r\n\r\nexport const LoginSchema = yup.object().shape({\r\n    emailId: yup.string().email().required('Email is required'),\r\n    password: yup\r\n        .string()\r\n        .required('Password is required')\r\n        .matches(/^[0-9]+$/, 'Must be only digits')\r\n        .min(5, 'Value should be more than 5 digits')\r\n});\r\n\r\nexport const SignUpSchema = z\r\n    .object({\r\n        fullName: z.string().nonempty('Full Name is required'),\r\n        emailId: z\r\n            .string()\r\n            .email('Invalid Email')\r\n            .nonempty('Email is required')\r\n            .regex(/^[a-z0-9][\\w\\.]+\\@\\w+?(\\.\\w+){1,}$/, 'Invalid Email'),\r\n        phoneNumber: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(10, 'Value should be more than 10 digits')\r\n            .nonempty('Phone Number is required'),\r\n        password: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required'),\r\n        confirmPassword: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required')\r\n    })\r\n    .refine((data) => data.password === data.confirmPassword, {\r\n        message: \"Passwords don't match\",\r\n        path: ['confirmPassword']\r\n    });\r\n\r\nexport const HealthFormSchema = yup.object().shape({\r\n    firstName: yup.string().required('First name is required'),\r\n    lastName: yup.string().required('Last name is required'),\r\n    dob: yup.date().required('Date of Birth is required'),\r\n    email: yup\r\n        .string()\r\n        .email('Invalid email address')\r\n        .required('Email address is required'),\r\n    insurancePlan: yup.string().required('Insurance plan is required'),\r\n    mailingAddress: yup.array().of(\r\n        yup.object().shape({\r\n            streetAddress: yup.string().required('Street Address is required'),\r\n            city: yup.string().required('City is required'),\r\n            region: yup.string().required('Region is required'),\r\n            postalCode: yup.string().required('Postal Code is required')\r\n        })\r\n    )\r\n});\r\n\r\nexport const TabFormSchema = z.object({\r\n    // Tab 1 schema\r\n    firstName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid First name')\r\n        .nonempty('First Name is required'),\r\n    lastName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid Last name')\r\n        .nonempty('Last Name is required'),\r\n    // Tab 2 schema\r\n    email: z.string().email('Invalid Email').nonempty('Email is required'),\r\n    phone: z.string().regex(/^\\d{10}$/, 'Phone number must be 10 digits'),\r\n    // Tab 3 schema\r\n    address: z\r\n        .string()\r\n        .min(5, 'Please enter a valid address')\r\n        .nonempty('Address is required'),\r\n    city: z\r\n        .string()\r\n        .min(4, 'Please enter a valid city')\r\n        .nonempty('City is required')\r\n});\r\n","import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  FieldError,\n  FieldValues,\n  Resolver,\n  appendErrors,\n} from 'react-hook-form';\nimport * as Yup from 'yup';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema:\n    | Yup.ObjectSchema<TFieldValues>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<Yup.InferType<typeof schema>> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],"names":["Login","_Object$keys","loginData","setLoginData","React","formData","setFormData","hasAccount","setHasAccount","navigate","useNavigate","intoDashboardLoginForm","useLocation","pathname","document","title","getElementsByTagName","style","display","paddingTop","localStorageData","localStorage","getItem","JSON","parse","register","handleSubmit","formState","errors","isSubmitting","useForm","resolver","yupResolver","LoginSchema","_jsxs","_Fragment","children","_jsx","className","onSubmit","async","data","emailId","password","Promise","r","setTimeout","state","userName","fullName","_objectSpread","type","concat","id","placeholder","class","message","htmlFor","Link","to","Object","keys","length","stringify","yup","shape","email","required","matches","min","SignUpSchema","z","object","string","nonempty","regex","phoneNumber","confirmPassword","refine","path","HealthFormSchema","firstName","lastName","dob","insurancePlan","mailingAddress","of","streetAddress","city","region","postalCode","TabFormSchema","phone","address","o","n","a","s","i","c","resolve","t","u","context","mode","assign","abortEarly","then","shouldUseNativeValidation","e","values","raw","inner","criteriaMode","reduce","types","reject"],"sourceRoot":""}