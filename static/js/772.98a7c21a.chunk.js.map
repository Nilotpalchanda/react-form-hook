{"version":3,"file":"static/js/772.98a7c21a.chunk.js","mappings":"sMAOA,MAyXA,EAzXmBA,KAAO,IAADC,EAAAC,EACrB,MAAOC,EAAWC,GAAgBC,EAAAA,SAAe,CAAC,IAC3CC,EAAkBC,GAAyBF,EAAAA,UAAe,IAC3D,MAAEG,EAAK,SAAEC,IAAaC,EAAAA,EAAAA,IAAc,CACtCC,MAAO,YACPC,OAAQ,EACRC,iBAAkB,WACdN,GAAsB,EAC1B,IAGJF,EAAAA,WAAgB,KACZS,SAASC,MAAQ,2CAA2C,GAC7D,IACH,MAAMC,EAAoB,CACtBC,UAAW,GACXC,SAAU,GACVC,IAAK,GACLC,MAAO,GACPC,cAAe,GACfC,eAAgB,CACZ,CAAEC,cAAe,GAAIC,KAAM,GAAIC,OAAQ,GAAIC,WAAY,OAGzD,SACFC,EAAQ,aACRC,EAAY,QACZC,EAAO,MACPC,EACA3B,WAAW,OAAE4B,EAAM,QAAEC,EAAO,aAAEC,KAC9BC,EAAAA,EAAAA,IAAQ,CACRC,eAAaC,EAAAA,EAAAA,GAAA,GAAMpB,GACnBqB,UAAUC,EAAAA,EAAAA,GAAYC,EAAAA,OAGpB,OAAEC,EAAM,OAAEC,EAAM,OAAEC,IAAWC,EAAAA,EAAAA,IAAc,CAC7Cd,UACAe,KAAM,mBAWV,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OACIG,UAAS,sDAAAC,QACiB,QAAtBhD,EAAAiD,OAAOC,KAAKhD,UAAU,IAAAF,OAAA,EAAtBA,EAAwBmD,QAAS,GACjCpB,IACCC,EACK,0BACA,eACPc,SAAA,EAEHM,EAAAA,EAAAA,KAAA,MAAIL,UAAU,GAAED,SAAC,sCACjBM,EAAAA,EAAAA,KAAA,QAAMC,SAAU1B,GApB5B2B,eAAwBC,GACpBhD,UACM,IAAIiD,SAASC,GAAMC,WAAWD,EAAG,OACvCjD,IACAL,EAAaoD,GACb1B,GAAKM,EAAAA,EAAAA,GAAC,CAAC,EAAGpB,GACd,IAcmD+B,UACnCF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,WAAUD,SAAA,EACrBM,EAAAA,EAAAA,KAAA,SAAOO,QAAQ,YAAYZ,UAAU,aAAYD,SAAC,mBAGlDF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,QAAOD,SAAA,EAClBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAOd,UAAY,aAAe,IAEtC6C,GAAG,YACHC,YAAY,cACRpC,EAAS,eAEhBI,EAAOd,YACJoC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAC5BhB,EAAOd,UAAU+C,cAI9BnB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,QAAOD,SAAA,EAClBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAOb,SAAW,aAAe,IAErC4C,GAAG,WACHC,YAAY,aACRpC,EAAS,cAEhBI,EAAOb,WACJmC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAC5BhB,EAAOb,SAAS8C,iBAKjCX,EAAAA,EAAAA,KAAA,OAAKL,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQD,SAAA,EACnBM,EAAAA,EAAAA,KAAA,SAAOO,QAAQ,MAAMZ,UAAU,aAAYD,SAAC,mBAG5CM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAOZ,IAAM,aAAe,IAEhC2C,GAAG,OACCnC,EAAS,MAAO,CAAEsC,aAAa,MAEtClC,EAAOZ,MACJkC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAC5BhB,EAAOZ,IAAI6C,gBAK5BnB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,WAAUD,SAAA,CACpBP,EAAO0B,KAAI,CAACC,EAAMC,KAEXvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OACIG,UAAU,cAAaD,SAAA,EAGvBM,EAAAA,EAAAA,KAAA,SACIO,QAAQ,gBACRZ,UAAU,aAAYD,SACzB,qBAGDF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQD,SAAA,EACnBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAOR,cACD,aACA,IAEVuC,GAAG,gBACHC,YAAY,kBACRpC,EAAS,kBAADsB,OACUmB,EAAK,qBAG9BrC,EAAOR,gBACJ8B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAEzBhB,EAAOR,cACFyC,cAKrBnB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,WAAUD,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,QAAOD,SAAA,EAClBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAOP,KACD,aACA,IAEVsC,GAAG,OACHC,YAAY,QACRpC,EAAS,kBAADsB,OACUmB,EAAK,YAG9BrC,EAAOP,OACJ6B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAEzBhB,EAAOP,KACFwC,cAKrBnB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,QAAOD,SAAA,EAClBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAON,OACD,aACA,IAEVqC,GAAG,SACHC,YAAY,UACRpC,EAAS,kBAADsB,OACUmB,EAAK,cAG9BrC,EAAON,SACJ4B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAEzBhB,EAAON,OACFuC,cAKrBnB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,QAAOD,SAAA,EAClBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,OACLb,UAAS,gBAAAC,OACLlB,EAAOL,WACD,aACA,IAEVoC,GAAG,aACHC,YAAY,eACRpC,EAAS,kBAADsB,OACUmB,EAAK,kBAG9BrC,EAAOL,aACJ2B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAEzBhB,EACKL,WACAsC,kBAjGpBG,EAAKL,KAwGdT,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAC5BqB,EAAQ,IACLf,EAAAA,EAAAA,KAAA,UACIQ,KAAK,SACLQ,MAAM,yBACNC,QAASA,IACL5B,EAAO0B,GACVrB,UAEDF,EAAAA,EAAAA,MAAA,OACI0B,MAAM,6BACNC,MAAM,KACN5D,OAAO,KACP6D,KAAK,eACLJ,MAAM,cACNK,QAAQ,YAAW3B,SAAA,EAEnBM,EAAAA,EAAAA,KAAA,QAAMsB,EAAE,iKACRtB,EAAAA,EAAAA,KAAA,QAAMsB,EAAE,kPAQpCtB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,yBAAwBD,UACnCM,EAAAA,EAAAA,KAAA,UACIQ,KAAK,SACLQ,MAAM,yBACNC,QAASA,IACL7B,EAAO,CACHlB,cAAe,GACfC,KAAM,GACNC,OAAQ,GACRC,WAAY,KAEnBqB,UAEDF,EAAAA,EAAAA,MAAA,OACI0B,MAAM,6BACNC,MAAM,KACN5D,OAAO,KACP6D,KAAK,eACLJ,MAAM,kBACNK,QAAQ,YAAW3B,SAAA,EAEnBM,EAAAA,EAAAA,KAAA,QAAMsB,EAAE,2OACRtB,EAAAA,EAAAA,KAAA,QAAMsB,EAAE,qKAKxBtB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQD,SAAA,EACnBM,EAAAA,EAAAA,KAAA,SAAOO,QAAQ,QAAQZ,UAAU,aAAYD,SAAC,mBAG9CM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,QACLb,UAAS,gBAAAC,OACLlB,EAAOX,MAAQ,aAAe,IAElC0C,GAAG,QACHC,YAAY,kBACRpC,EAAS,WAEhBI,EAAOX,QACJiC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAC5BhB,EAAOX,MAAM4C,gBAK9BX,EAAAA,EAAAA,KAAA,OAAKL,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQD,SAAA,EACnBM,EAAAA,EAAAA,KAAA,SACIO,QAAQ,gBACRZ,UAAU,aAAYD,SACzB,oBAGDF,EAAAA,EAAAA,MAAA,OAAKwB,MAAM,aAAYtB,SAAA,EACnBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,QACLQ,MAAM,mBACNP,GAAG,uBACHc,MAAO,oBACHjD,EAAS,oBAEjB0B,EAAAA,EAAAA,KAAA,SACIgB,MAAM,mBACNQ,IAAI,uBAAsB9B,SAC7B,yBAILF,EAAAA,EAAAA,MAAA,OAAKwB,MAAM,aAAYtB,SAAA,EACnBM,EAAAA,EAAAA,KAAA,SAAAjB,EAAAA,EAAAA,GAAA,CACIyB,KAAK,QACLQ,MAAM,mBACNP,GAAG,uBACHc,MAAO,oBACHjD,EAAS,oBAEjB0B,EAAAA,EAAAA,KAAA,SACIgB,MAAM,mBACNQ,IAAI,uBAAsB9B,SAC7B,wBAKJhB,EAAOV,gBACJgC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBD,SAC5BhB,EAAOV,cAAc2C,gBAKtCX,EAAAA,EAAAA,KAAA,OAAKL,UAAU,MAAKD,UAChBM,EAAAA,EAAAA,KAAA,OAAKL,UAAU,SAAQD,UACnBM,EAAAA,EAAAA,KAAA,UACIQ,KAAK,SACLb,UAAS,cAAAC,OACJjB,EAEK,kBADA,qBAGV8C,UAAW9C,EAAQe,SAElBd,EAAe,iBAAmB,wBAOpC,QAAtB/B,EAAAgD,OAAOC,KAAKhD,UAAU,IAAAD,OAAA,EAAtBA,EAAwBkD,QAAS,IAAMnB,GAAgB3B,IACpDuC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,qEAAoED,SAAA,EAC/EM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,eACJM,EAAAA,EAAAA,KAAA,OAAAN,SAAMgC,KAAKC,UAAU7E,EAAW,KAAM,UAG/C,C,mFCzXJ,MAAM8E,EAAcC,EAAAA,KAAaC,MAAM,CAC1CC,QAASF,EAAAA,KAAa9D,QAAQiE,SAAS,qBACvCC,SAAUJ,EAAAA,KAELG,SAAS,wBACTE,QAAQ,WAAY,uBACpBC,IAAI,EAAG,wCAGHC,EAAeC,EAAAA,EACvBC,OAAO,CACJC,SAAUF,EAAAA,EAAEG,SAASC,SAAS,yBAC9BV,QAASM,EAAAA,EACJG,SACAzE,MAAM,iBACN0E,SAAS,qBACTC,MAAM,qCAAsC,iBACjDC,YAAaN,EAAAA,EACRG,SACAE,MAAM,WAAY,uBAClBP,IAAI,GAAI,uCACRM,SAAS,4BACdR,SAAUI,EAAAA,EACLG,SACAE,MAAM,WAAY,uBAClBP,IAAI,EAAG,sCACPM,SAAS,wBACdG,gBAAiBP,EAAAA,EACZG,SACAE,MAAM,WAAY,uBAClBP,IAAI,EAAG,sCACPM,SAAS,0BAEjBI,QAAQ1C,GAASA,EAAK8B,WAAa9B,EAAKyC,iBAAiB,CACtDjC,QAAS,wBACTmC,KAAM,CAAC,qBAGF5D,EAAmB2C,EAAAA,KAAaC,MAAM,CAC/ClE,UAAWiE,EAAAA,KAAaG,SAAS,0BACjCnE,SAAUgE,EAAAA,KAAaG,SAAS,yBAChClE,IAAK+D,EAAAA,KAAWG,SAAS,6BACzBjE,MAAO8D,EAAAA,KAEF9D,MAAM,yBACNiE,SAAS,6BACdhE,cAAe6D,EAAAA,KAAaG,SAAS,8BACrC/D,eAAgB4D,EAAAA,KAAYkB,GACxBlB,EAAAA,KAAaC,MAAM,CACf5D,cAAe2D,EAAAA,KAAaG,SAAS,8BACrC7D,KAAM0D,EAAAA,KAAaG,SAAS,oBAC5B5D,OAAQyD,EAAAA,KAAaG,SAAS,sBAC9B3D,WAAYwD,EAAAA,KAAaG,SAAS,gCAKjCgB,EAAgBX,EAAAA,EAAEC,OAAO,CAElC1E,UAAWyE,EAAAA,EACNG,SACAL,IAAI,EAAG,mCACPM,SAAS,0BACd5E,SAAUwE,EAAAA,EACLG,SACAL,IAAI,EAAG,kCACPM,SAAS,yBAEd1E,MAAOsE,EAAAA,EAAEG,SAASzE,MAAM,iBAAiB0E,SAAS,qBAClDQ,MAAOZ,EAAAA,EAAEG,SAASE,MAAM,WAAY,kCAEpCQ,QAASb,EAAAA,EACJG,SACAL,IAAI,EAAG,gCACPM,SAAS,uBACdtE,KAAMkE,EAAAA,EACDG,SACAL,IAAI,EAAG,6BACPM,SAAS,qB,uDCrCF,SAAAU,EACdA,EAGAC,EACAC,GAYA,YAAO,IAbPD,IAAAA,EAA4D,CAAE,YAC9DC,IAAAA,EAUI,CAAC,GAES,SAAAC,EAAQC,EAASC,GAAW,WAAApD,QAAAqD,QAAA,SAAAC,EAAArD,GAAA,QAAAsD,GAElCP,EAAcQ,QAKjBxD,QAAAqD,QAEoBN,EACM,SAAzBE,EAAgBQ,KAAkB,eAAiB,YAEnDP,EACAzD,OAAOiE,OAAO,CAAEC,YAAA,GAAqBX,EAAe,CAAEQ,QAAAL,MACvDS,MAAA,SALKN,GASN,OAFAF,EAAQS,4BAA6BC,EAAAA,EAAAA,GAAuB,CAAE,EAAEV,GAEzD,CACLW,OAAQd,EAAgBe,IAAMd,EAASI,EACvChF,OAAQ,CAAC,EACT,WAAAwF,GAAA,OAAA7D,EAAA6D,EAAA,QAAAP,GAAAA,EAAAK,KAAAL,EAAAK,UAAA,EAAA3D,GAAAsD,CAAA,CArBoC,aAsB/BO,GACP,IAAKA,EAAEG,MACL,MAAMH,EAGR,MAAO,CACLC,OAAQ,CAAE,EACVzF,QAAQgF,EAAAA,EAAAA,IA5EdP,EA8EUe,EA7EVd,GA8EWI,EAAQS,2BACkB,QAAzBT,EAAQc,cA7EZnB,EAAMkB,OAAS,IAAIE,QACzB,SAACL,EAAUR,GAKT,GAJKQ,EAASR,EAAMZ,QAClBoB,EAASR,EAAMZ,MAAS,CAAEnC,QAAS+C,EAAM/C,QAASH,KAAMkD,EAAMlD,OAG5D4C,EAA0B,CAC5B,IAAMD,EAAQe,EAASR,EAAMZ,MAAO0B,MAC9BnB,EAAWF,GAASA,EAAMO,EAAMlD,MAEtC0D,EAASR,EAAMZ,OAASzC,EAAAA,EAAAA,IACtBqD,EAAMZ,KACNM,EACAc,EACAR,EAAMlD,KACN6C,EACK,GAAgBzD,OAAOyD,EAAsBK,EAAM/C,SACpD+C,EAAM/C,QAEd,CAEA,OAAOuD,CACT,GACA,CAAC,IAwDKV,IAnFe,IACvBL,EACAC,CAoFE,IACF,CAAC,MAAAc,GAAA,OAAA9D,QAAAqE,OAAAP,EACH,G","sources":["Components/DashBoard/FormManagement/HealthForm/HealthForm.js","ValidationSchema/ValidationSchema.js","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import React from 'react';\r\nimport { useFieldArray, useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport './HealthForm.css';\r\nimport { HealthFormSchema } from '../../../../ValidationSchema/ValidationSchema';\r\nimport { useLoadingBar } from 'react-top-loading-bar';\r\n\r\nconst HealthForm = () => {\r\n    const [formState, setFormState] = React.useState({});\r\n    const [loadingCompleted, setIsLoadingCompleted] = React.useState(false)\r\n    const { start, complete } = useLoadingBar({\r\n        color: \"#1cdbbcd9\",\r\n        height: 6,\r\n        onLoaderFinished: function(){\r\n            setIsLoadingCompleted(true)\r\n        }\r\n      });\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'Health Insurance Enrollment Form with Yup';\r\n    }, []);\r\n    const defaultFormValues = {\r\n        firstName: '',\r\n        lastName: '',\r\n        dob: '',\r\n        email: '',\r\n        insurancePlan: '',\r\n        mailingAddress: [\r\n            { streetAddress: '', city: '', region: '', postalCode: '' }\r\n        ]\r\n    }\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        control,\r\n        reset,\r\n        formState: { errors, isValid, isSubmitting }\r\n    } = useForm({\r\n        defaultValues: {...defaultFormValues},\r\n        resolver: yupResolver(HealthFormSchema)\r\n    });\r\n\r\n    const { fields, append, remove } = useFieldArray({\r\n        control,\r\n        name: 'mailingAddress'\r\n    });\r\n\r\n    async function onSubmit(data) {\r\n        start()\r\n        await new Promise((r) => setTimeout(r, 1000)); // Simulate API call\r\n        complete()\r\n        setFormState(data);\r\n        reset({...defaultFormValues});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={`container bg-body rounded shadow-lg mt-4 pt-4 pb-4 ${\r\n                    Object.keys(formState)?.length > 0 &&\r\n                    isValid &&\r\n                    !isSubmitting\r\n                        ? 'health-form-with-result'\r\n                        : 'health-form'\r\n                }`}\r\n            >\r\n                <h1 className=\"\">Health Insurance Enrollment Form</h1>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"mb-3 row\">\r\n                            <label htmlFor=\"firstName\" className=\"form-label\">\r\n                                Employee name\r\n                            </label>\r\n                            <div className=\"col-6\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className={`form-control ${\r\n                                        errors.firstName ? 'is-invalid' : ''\r\n                                    }`}\r\n                                    id=\"firstName\"\r\n                                    placeholder=\"First name\"\r\n                                    {...register('firstName')}\r\n                                />\r\n                                {errors.firstName && (\r\n                                    <div className=\"invalid-feedback\">\r\n                                        {errors.firstName.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className={`form-control ${\r\n                                        errors.lastName ? 'is-invalid' : ''\r\n                                    }`}\r\n                                    id=\"lastName\"\r\n                                    placeholder=\"Last name\"\r\n                                    {...register('lastName')}\r\n                                />\r\n                                {errors.lastName && (\r\n                                    <div className=\"invalid-feedback\">\r\n                                        {errors.lastName.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-3 row\">\r\n                            <div className=\"col-12\">\r\n                                <label htmlFor=\"dob\" className=\"form-label\">\r\n                                    Date of Birth\r\n                                </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className={`form-control ${\r\n                                        errors.dob ? 'is-invalid' : ''\r\n                                    }`}\r\n                                    id=\"dob\"\r\n                                    {...register('dob', { valueAsDate: true })}\r\n                                />\r\n                                {errors.dob && (\r\n                                    <div className=\"invalid-feedback\">\r\n                                        {errors.dob.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-3 row\">\r\n                            {fields.map((item, index) => {\r\n                                return (\r\n                                    <>\r\n                                        <div\r\n                                            className=\"col-11 mt-2\"\r\n                                            key={item.id}\r\n                                        >\r\n                                            <label\r\n                                                htmlFor=\"streetAddress\"\r\n                                                className=\"form-label\"\r\n                                            >\r\n                                                Mailing address\r\n                                            </label>\r\n                                            <div className=\"col-12\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className={`form-control ${\r\n                                                        errors.streetAddress\r\n                                                            ? 'is-invalid'\r\n                                                            : ''\r\n                                                    }`}\r\n                                                    id=\"streetAddress\"\r\n                                                    placeholder=\"Street Address\"\r\n                                                    {...register(\r\n                                                        `mailingAddress.${index}.streetAddress`\r\n                                                    )}\r\n                                                />\r\n                                                {errors.streetAddress && (\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        {\r\n                                                            errors.streetAddress\r\n                                                                .message\r\n                                                        }\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            <div className=\"row mt-2\">\r\n                                                <div className=\"col-4\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={`form-control ${\r\n                                                            errors.city\r\n                                                                ? 'is-invalid'\r\n                                                                : ''\r\n                                                        }`}\r\n                                                        id=\"city\"\r\n                                                        placeholder=\"City\"\r\n                                                        {...register(\r\n                                                            `mailingAddress.${index}.city`\r\n                                                        )}\r\n                                                    />\r\n                                                    {errors.city && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {\r\n                                                                errors.city\r\n                                                                    .message\r\n                                                            }\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div className=\"col-4\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={`form-control ${\r\n                                                            errors.region\r\n                                                                ? 'is-invalid'\r\n                                                                : ''\r\n                                                        }`}\r\n                                                        id=\"region\"\r\n                                                        placeholder=\"Region\"\r\n                                                        {...register(\r\n                                                            `mailingAddress.${index}.region`\r\n                                                        )}\r\n                                                    />\r\n                                                    {errors.region && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {\r\n                                                                errors.region\r\n                                                                    .message\r\n                                                            }\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div className=\"col-4\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className={`form-control ${\r\n                                                            errors.postalCode\r\n                                                                ? 'is-invalid'\r\n                                                                : ''\r\n                                                        }`}\r\n                                                        id=\"postalCode\"\r\n                                                        placeholder=\"Postal Code\"\r\n                                                        {...register(\r\n                                                            `mailingAddress.${index}.postalCode`\r\n                                                        )}\r\n                                                    />\r\n                                                    {errors.postalCode && (\r\n                                                        <div className=\"invalid-feedback\">\r\n                                                            {\r\n                                                                errors\r\n                                                                    .postalCode\r\n                                                                    .message\r\n                                                            }\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-1 action-btn\">\r\n                                            {index > 0 && (\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    class=\"btn btn-default btn-sm\"\r\n                                                    onClick={() =>\r\n                                                        remove(index)\r\n                                                    }\r\n                                                >\r\n                                                    <svg\r\n                                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                        width=\"16\"\r\n                                                        height=\"16\"\r\n                                                        fill=\"currentColor\"\r\n                                                        class=\"bi bi-trash\"\r\n                                                        viewBox=\"0 0 16 16\"\r\n                                                    >\r\n                                                        <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" />\r\n                                                        <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" />\r\n                                                    </svg>\r\n                                                </button>\r\n                                            )}\r\n                                        </div>\r\n                                    </>\r\n                                );\r\n                            })}\r\n                            <div className=\"mailing-adress-actions\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"btn btn-default btn-sm\"\r\n                                    onClick={() =>\r\n                                        append({\r\n                                            streetAddress: '',\r\n                                            city: '',\r\n                                            region: '',\r\n                                            postalCode: ''\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        width=\"16\"\r\n                                        height=\"16\"\r\n                                        fill=\"currentColor\"\r\n                                        class=\"bi bi-house-add\"\r\n                                        viewBox=\"0 0 16 16\"\r\n                                    >\r\n                                        <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h4a.5.5 0 1 0 0-1h-4a.5.5 0 0 1-.5-.5V7.207l5-5 6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\" />\r\n                                        <path d=\"M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0m-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 1 0 1 0v-1h1a.5.5 0 1 0 0-1h-1v-1a.5.5 0 0 0-.5-.5\" />\r\n                                    </svg>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-3 row\">\r\n                            <div className=\"col-12\">\r\n                                <label htmlFor=\"email\" className=\"form-label\">\r\n                                    Email address\r\n                                </label>\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className={`form-control ${\r\n                                        errors.email ? 'is-invalid' : ''\r\n                                    }`}\r\n                                    id=\"email\"\r\n                                    placeholder=\"abc@domain.com\"\r\n                                    {...register('email')}\r\n                                />\r\n                                {errors.email && (\r\n                                    <div className=\"invalid-feedback\">\r\n                                        {errors.email.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mb-3 row\">\r\n                            <div className=\"col-12\">\r\n                                <label\r\n                                    htmlFor=\"insurancePlan\"\r\n                                    className=\"form-label\"\r\n                                >\r\n                                    Insurance plan\r\n                                </label>\r\n                                <div class=\"form-check\">\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        class=\"form-check-input\"\r\n                                        id=\"validationFormCheck2\"\r\n                                        value={'Insurance Plan 1'}\r\n                                        {...register('insurancePlan')}\r\n                                    />\r\n                                    <label\r\n                                        class=\"form-check-label\"\r\n                                        for=\"validationFormCheck2\"\r\n                                    >\r\n                                        Insurance Plan 1\r\n                                    </label>\r\n                                </div>\r\n                                <div class=\"form-check\">\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        class=\"form-check-input\"\r\n                                        id=\"validationFormCheck2\"\r\n                                        value={'Insurance Plan 2'}\r\n                                        {...register('insurancePlan')}\r\n                                    />\r\n                                    <label\r\n                                        class=\"form-check-label\"\r\n                                        for=\"validationFormCheck2\"\r\n                                    >\r\n                                        Insurance Plan 2\r\n                                    </label>\r\n                                </div>\r\n\r\n                                {errors.insurancePlan && (\r\n                                    <div className=\"invalid-feedback\">\r\n                                        {errors.insurancePlan.message}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className={` submit-hf ${\r\n                                        !isValid\r\n                                            ? 'btn btn-secondary'\r\n                                            : 'btn btn-primary'\r\n                                    }`}\r\n                                    disabled={!isValid}\r\n                                >\r\n                                    {isSubmitting ? 'Submitting....' : 'Submit'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {Object.keys(formState)?.length > 0 && !isSubmitting && loadingCompleted && (\r\n                <div className=\"container bg-body rounded shadow-lg mt-4 pt-4 pb-4 heath-form-data\">\r\n                    <h1>Form Data</h1>\r\n                    <pre>{JSON.stringify(formState, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HealthForm;\r\n","import * as yup from 'yup';\r\nimport { z } from 'zod';\r\n\r\nexport const LoginSchema = yup.object().shape({\r\n    emailId: yup.string().email().required('Email is required'),\r\n    password: yup\r\n        .string()\r\n        .required('Password is required')\r\n        .matches(/^[0-9]+$/, 'Must be only digits')\r\n        .min(5, 'Value should be more than 5 digits')\r\n});\r\n\r\nexport const SignUpSchema = z\r\n    .object({\r\n        fullName: z.string().nonempty('Full Name is required'),\r\n        emailId: z\r\n            .string()\r\n            .email('Invalid Email')\r\n            .nonempty('Email is required')\r\n            .regex(/^[a-z0-9][\\w\\.]+\\@\\w+?(\\.\\w+){1,}$/, 'Invalid Email'),\r\n        phoneNumber: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(10, 'Value should be more than 10 digits')\r\n            .nonempty('Phone Number is required'),\r\n        password: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required'),\r\n        confirmPassword: z\r\n            .string()\r\n            .regex(/^[0-9]+$/, 'Must be only digits')\r\n            .min(5, 'Value should be more than 5 digits')\r\n            .nonempty('Password is required')\r\n    })\r\n    .refine((data) => data.password === data.confirmPassword, {\r\n        message: \"Passwords don't match\",\r\n        path: ['confirmPassword']\r\n    });\r\n\r\nexport const HealthFormSchema = yup.object().shape({\r\n    firstName: yup.string().required('First name is required'),\r\n    lastName: yup.string().required('Last name is required'),\r\n    dob: yup.date().required('Date of Birth is required'),\r\n    email: yup\r\n        .string()\r\n        .email('Invalid email address')\r\n        .required('Email address is required'),\r\n    insurancePlan: yup.string().required('Insurance plan is required'),\r\n    mailingAddress: yup.array().of(\r\n        yup.object().shape({\r\n            streetAddress: yup.string().required('Street Address is required'),\r\n            city: yup.string().required('City is required'),\r\n            region: yup.string().required('Region is required'),\r\n            postalCode: yup.string().required('Postal Code is required')\r\n        })\r\n    )\r\n});\r\n\r\nexport const TabFormSchema = z.object({\r\n    // Tab 1 schema\r\n    firstName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid First name')\r\n        .nonempty('First Name is required'),\r\n    lastName: z\r\n        .string()\r\n        .min(4, 'Please enter a valid Last name')\r\n        .nonempty('Last Name is required'),\r\n    // Tab 2 schema\r\n    email: z.string().email('Invalid Email').nonempty('Email is required'),\r\n    phone: z.string().regex(/^\\d{10}$/, 'Phone number must be 10 digits'),\r\n    // Tab 3 schema\r\n    address: z\r\n        .string()\r\n        .min(5, 'Please enter a valid address')\r\n        .nonempty('Address is required'),\r\n    city: z\r\n        .string()\r\n        .min(4, 'Please enter a valid city')\r\n        .nonempty('City is required')\r\n});\r\n","import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  FieldError,\n  FieldValues,\n  Resolver,\n  appendErrors,\n} from 'react-hook-form';\nimport * as Yup from 'yup';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema:\n    | Yup.ObjectSchema<TFieldValues>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<Yup.InferType<typeof schema>> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],"names":["HealthForm","_Object$keys","_Object$keys2","formState","setFormState","React","loadingCompleted","setIsLoadingCompleted","start","complete","useLoadingBar","color","height","onLoaderFinished","document","title","defaultFormValues","firstName","lastName","dob","email","insurancePlan","mailingAddress","streetAddress","city","region","postalCode","register","handleSubmit","control","reset","errors","isValid","isSubmitting","useForm","defaultValues","_objectSpread","resolver","yupResolver","HealthFormSchema","fields","append","remove","useFieldArray","name","_jsxs","_Fragment","children","className","concat","Object","keys","length","_jsx","onSubmit","async","data","Promise","r","setTimeout","htmlFor","type","id","placeholder","message","valueAsDate","map","item","index","class","onClick","xmlns","width","fill","viewBox","d","value","for","disabled","JSON","stringify","LoginSchema","yup","shape","emailId","required","password","matches","min","SignUpSchema","z","object","fullName","string","nonempty","regex","phoneNumber","confirmPassword","refine","path","of","TabFormSchema","phone","address","o","n","a","s","i","c","resolve","t","u","context","mode","assign","abortEarly","then","shouldUseNativeValidation","e","values","raw","inner","criteriaMode","reduce","types","reject"],"sourceRoot":""}